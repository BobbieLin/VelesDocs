{
  "hash": "2c8d1f5a4e144c7c833d3ac92b9c9bca",
  "result": {
    "markdown": "---\ntitle: \"`question`\"\nsubtitle: \"Create `Question` object\"\ndescription: \"A handy wrapper around [`Question()`](../structure/Question). Creates a `Question` object. Most basic function in Veles. Can be used either to create a single `Question` object or to convert a whole questionnaire at once.\"\naliases: \n  - ../question.html\ncategories:\n  - \"`velesresearch`\"\n  - \"`velesresearch.tools`\"\n---\n\n# Modules\n\n`velesresearch`\n\n`velesresearch.tools`\n\n# Usage\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nquestion(label, question_text, *answers, question_type, description=None, options=None)\n```\n:::\n\n\n# Arguments\n\n::: arg_name\nlabel\n:::\n::: arg_desc\n`str`; internal name of the question. Will become column name in the database.\n:::\n\n::: arg_name\nquestion_text\n:::\n::: arg_desc\n`str` or `list[str]`; the text of the question. This is what the participant actually sees. If given as a list, each entery is converted to a question.\n:::\n\n::: arg_name\n\\*answers\n:::\n::: arg_desc\n`list[str]` or `str`; list of possible answers. Can be given as a `list` object or subsequent `string` objects separated by commas.\n:::\n\n::: arg_name\nquestion_type\n:::\n::: arg_desc\n`str`; type of the question. Default is `\"radio\"`. For a list of available question types see [Question types](../questiontypes.qmd).\n:::\n\n::: arg_name\noptions\n:::\n::: arg_desc\n`QuestionOptions`; options object created with [`QuestionOptions()`](../options/QuestionOptions.qmd), changes behaviour of the question (e.g. random answer order or required answer).\n:::\n\n::: arg_name\ndescription\n:::\n::: arg_desc\n`str`; description of the question. Looks like a subtitle. Can be used to give the participant additional information, e.g. `\"in years\"` in an age question.\n:::\n\n# Value\n\nThe return value depends on `question_text` argument type. If it's a `str`, then the output is a single `Question` object. If it's a list of items, the output value is a list, where each input item is a separate `Question` object with the same scale and options. Labels of such list have a form of `label_number`, eg. `\"MMPI_1\"`, `\"MMPI_2\"`, ..., `\"MMPI_567\"`.\n\n# See also\n\n- [Question types](../questiontypes.qmd) for wrappers like `radio()` or `checkbox()` and available question types.\n\n- [`QuestionOptions()`](../options/QuestionOptions) for available question modifications.\n\n- [`page()`](./page.qmd) for composing questions into pages.\n\n# Examples\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfrom velesresearch import question, QuestionOptions\n\ngender = question(\n    \"gender\",\n    \"What is your gender?\",\n    \"Woman\",\n    \"Man\",\n    options=QuestionOptions(\n        answers_order=\"random\",\n        none=True,\n        none_text=\"I don't want to answer\",\n        other=True,\n        other_placeholder=\"Write your gender.\",\n    ),\n    description=\"Choose an answer from options below.\",\n)\n```\n:::\n\n\n",
    "supporting": [
      "question_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}