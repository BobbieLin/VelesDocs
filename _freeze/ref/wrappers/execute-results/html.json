{
  "hash": "9c9cbcc9ab90a74e78260ad498f12e6a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Wrappers for question types\ntoc: true\ntoc-depth: 1\n---\n\n\n\n\n# `survey()`\n\nCreate a survey object.\n\n## Signature\n\n::: {#cb79ba31 .cell execution_count=1}\n``` {.python .cell-code}\nsurvey(\n    *pages: PageModel | list[PageModel],\n    createStructure: bool = True,\n    buildForPublication: bool = False,\n    folderName: str = 'survey',\n    path: str | pathlib.Path = '/home/jakub/Pulpit/git-repos/VelesResearch',\n    addScoreToResults: bool = True,\n    allowCompleteSurveyAutomatic: bool = True,\n    allowResizeComment: bool = True,\n    autoGrowComment: bool = False,\n    backgroundImage: str | None = None,\n    backgroundOpacity: int = 1,\n    calculatedValues: list[dict] | None = None,\n    checkErrorsMode: str = 'onNextPage',\n    commentAreaRows: int = 2,\n    completedBeforeHtml: str | None = None,\n    completedHtml: str | None = None,\n    completedHtmlOnCondition: list[dict] | None = None,\n    completeText: str | None = None,\n    cookieName: str | None = None,\n    editText: str | None = None,\n    firstPageIsStarted: bool | None = None,\n    focusFirstQuestionAutomatic: bool = False,\n    focusOnFirstError: bool = True,\n    goNextPageAutomatic: bool = False,\n    locale: str = 'en',\n    logo: str | None = None,\n    logoFit: str = 'contain',\n    logoHeight: str = '200px',\n    logoPosition: str = 'left',\n    logoWidth: str = '300px',\n    matrixDragHandleArea: str = 'entireItem',\n    maxOthersLength: int = 0,\n    maxTextLength: int = 0,\n    maxTimeToFinish: int | None = None,\n    maxTimeToFinishPage: int | None = None,\n    mode: str = 'edit',\n    navigateToUrl: str | None = None,\n    navigateToUrlOnCondition: list[dict] | None = None,\n    numberOfGroups: int = 1,\n    pageNextText: str | None = None,\n    pagePrevText: str | None = None,\n    previewText: str | None = None,\n    progressBarInheritWidthFrom: str = 'container',\n    progressBarShowPageNumbers: bool = False,\n    progressBarShowPageTitles: bool = False,\n    progressBarType: str = 'pages',\n    questionDescriptionLocation: str = 'underTitle',\n    questionErrorLocation: str = 'top',\n    questionsOnPageMode: str = 'standard',\n    questionsOrder: str = 'initial',\n    questionStartIndex: int | str | None = None,\n    questionTitleLocation: str = 'top',\n    questionTitlePattern: str = 'numTitleRequire',\n    requiredText: str = '*',\n    scoresSuffix: str = '_score',\n    showCompletedPage: bool = True,\n    showNavigationButtons: str = 'bottom',\n    showPageNumbers: bool | None = None,\n    showPageTitles: bool = True,\n    showPrevButton: bool = True,\n    showPreviewBeforeComplete: str = 'noPreview',\n    showProgressBar: str = 'off',\n    showQuestionNumbers: bool | str = True,\n    showTimerPanel: str = 'none',\n    showTimerPanelMode: str = 'all',\n    showTitle: bool = True,\n    showTOC: bool = False,\n    startSurveyText: str | None = None,\n    storeOthersAsComment: bool = True,\n    textUpdateMode: str = 'onBlur',\n    title: str | None = None,\n    tocLocation: str = 'left',\n    triggers: list[dict] | None = None,\n    validateVisitedEmptyFields: bool = False,\n    width: str | None = None,\n    widthMode: str = 'auto',\n    addCode: dict | None = None,\n    **kwargs\n) -> SurveyModel\n```\n:::\n\n\n## Arguments\n\n**`addScoreToResults`** : _bool_<br>\nWhether to add the scores of the questions with `correctAnswer` to the results data. See `scoresSuffix`.\n\n**`allowCompleteSurveyAutomatic`** : _bool_<br>\nWhether the survey should complete automatically after all questions on the last page had been answered. Works only if `goNextPageAutomatic=True`. Default is True.\n\n**`allowResizeComment`** : _bool_<br>\nWhether to allow resizing the long questions input area. Default is True. Can be overridden for individual questions.\n\n**`autoGrowComment`** : _bool_<br>\nWhether to automatically grow the long questions input area. Default is False. Can be overridden for individual questions.\n\n**`backgroundImage`** : _str | None_<br>\nURL or base64 of the background image.\n\n**`backgroundOpacity`** : _int_<br>\nThe opacity of the background image. 0 is transparent, 1 is opaque.\n\n**`calculatedValues`** : _list[dict] | None_<br>\nThe calculated values for the survey. List of dictionaries with keys `name`, `expression` and optionally `includeIntoResult` (bool) to save the value in the db.\n\n**`checkErrorsMode`** : _str_<br>\nThe mode of checking errors. Can be 'onNextPage', 'onValueChanged', 'onComplete'.\n\n**`commentAreaRows`** : _int_<br>\nThe number of rows for the comment area of the questions with `showCommentArea` or `showOtherItem` set to True. Default is 2. Can be overridden for individual questions.\n\n**`completedBeforeHtml`** : _str | None_<br>\nHTML content to show if the survey had been completed before. Use with `cookieName`.\n\n**`completedHtml`** : _str | None_<br>\nHTML content to show after the survey is completed.\n\n**`completedHtmlOnCondition`** : _list[dict] | None_<br>\nHTML content to show after the survey is completed if the condition is met. List of dictionaries with keys `expression` and `html` keys.\n\n**`completeText`** : _str | None_<br>\nText for the 'Complete' button.\n\n**`cookieName`** : _str | None_<br>\nThe name of the cookie to store the information about the survey having been completed. See `completedBeforeHtml`.\n\n**`editText`** : _str | None_<br>\nText for the 'Edit' button if `showPreviewBeforeComplete=True`.\n\n**`firstPageIsStarted`** : _bool | None_<br>\nWhether the first page is a start page. Default is False.\n\n**`focusFirstQuestionAutomatic`** : _bool_<br>\nWhether to focus the first question automatically. Default is False.\n\n**`focusOnFirstError`** : _bool_<br>\nWhether to focus on the first error if it was raised. Default is True.\n\n**`goNextPageAutomatic`** : _bool_<br>\nWhether to go to the next page automatically after all questions had been answered. Default is False.\n\n**`locale`** : _str_<br>\nThe locale of the survey. Default is 'en'.\n\n**`logo`** : _str | None_<br>\nURL or base64 of the logo image.\n\n**`logoFit`** : _str_<br>\nThe `object-fit` CSS property logo image. Can be 'contain', 'cover', 'fill', 'none'.\n\n**`logoHeight`** : _str_<br>\nThe height of the logo image in CSS units. Default is '200px'.\n\n**`logoPosition`** : _str_<br>\nThe position of the logo image. Can be 'left', 'right', 'none'.\n\n**`logoWidth`** : _str_<br>\nThe width of the logo image in CSS units. Default is '300px'.\n\n**`matrixDragHandleArea`** : _str_<br>\nThe part of an item with which the users can drag and drop in dynamic matrix questions. Can be 'entireItem' (default), 'icon' (drag icon only).\n\n**`maxOthersLength`** : _int_<br>\nThe maximum length of the comment area in the questions with `showOtherItem` or `showCommentArea` set to True. Default is 0 (no limit).\n\n**`maxTextLength`** : _int_<br>\nThe maximum length of the text in the textual questions. Default is 0 (no limit).\n\n**`maxTimeToFinish`** : _int | None_<br>\nMaximum time in seconds to finish the survey.\n\n**`maxTimeToFinishPage`** : _int | None_<br>\nMaximum time in seconds to finish the page. 0 means no limit.\n\n**`mode`** : _str_<br>\nThe mode of the survey. Can be 'edit' (can be filled), 'display' (read-only).\n\n**`navigateToUrl`** : _str | None_<br>\nURL to navigate to after the survey is completed.\n\n**`navigateToUrlOnCondition`** : _list[dict] | None_<br>\nURL to navigate to after the survey is completed if the condition is met. List of dictionaries with keys `expression` and `url` keys.\n\n**`pageNextText`** : _str | None_<br>\nText for the 'Next' button.\n\n**`pagePrevText`** : _str | None_<br>\nText for the 'Previous' button.\n\n**`previewText`** : _str | None_<br>\nText for the 'Preview' button if `showPreviewBeforeComplete=True`.\n\n**`progressBarInheritWidthFrom`** : _str_<br>\nThe element from which the progress bar should inherit the width. Can be 'container', 'survey'.\n\n**`progressBarShowPageNumbers`** : _bool_<br>\nWhether to show the page numbers on the progress bar. Only if `progressBarType=\"pages\"`. Default is False. See `showProgressBar`.\n\n**`progressBarShowPageTitles`** : _bool_<br>\nWhether to show the page titles on the progress bar. Only if `progressBarType=\"pages\"`. Default is False. See `showProgressBar`.\n\n**`progressBarType`** : _str_<br>\nThe type of the progress bar. Can be 'pages' (default), 'questions', 'requiredQuestions', 'correctQuestions'.\n\n**`questionDescriptionLocation`** : _str_<br>\nThe location of the description for the questions. Can be 'underTitle' (default), 'underInput'. Can be overridden for individual questions.\n\n**`questionErrorLocation`** : _str_<br>\nThe location of the error text for the questions. Can be 'top' (default), 'bottom'. Can be overridden for individual questions.\n\n**`questionsOnPageMode`** : _str_<br>\nThe mode of the questions on the page. Can be 'standard' (default; use structure in JSON), 'singlePage' (combine all questions into a single page), 'questionPerPage' (move all questions to separate pages).\n\n**`questionsOrder`** : _str_<br>\nThe order of the questions. Can be 'initial' (default), 'random'. Can be overridden for individual pages.\n\n**`questionStartIndex`** : _int | str | None_<br>\nThe number or letter with which the questions numbering should start.\n\n**`questionTitleLocation`** : _str_<br>\nThe location of the title for the questions. Can be 'top' (default), 'bottom', 'left'. Can be overridden for individual questions or pages.\n\n**`questionTitlePattern`** : _str_<br>\nThe pattern of the question title. See <https://surveyjs.io/form-library/documentation/design-survey/configure-question-titles#title-pattern>.\n\n**`requiredText`** : _str_<br>\nThe text denoting the required questions. Default is '*'.\n\n**`scoresSuffix`** : _str_<br>\nThe suffix of the score column if `addScoreToResults=True`. Default is '_score'.\n\n**`showCompletedPage`** : _bool_<br>\nWhether to show the completed page. Default is True.\n\n**`showNavigationButtons`** : _str_<br>\nThe location of the navigation buttons. Can be 'bottom' (default), 'top', 'both', 'none'.\n\n**`showPageNumbers`** : _bool | None_<br>\nWhether to show the page numbers in the pages' titles.\n\n**`showPageTitles`** : _bool_<br>\nWhether to show the page titles. Default is True.\n\n**`showPrevButton`** : _bool_<br>\nWhether to show the 'Previous' button. Default is True.\n\n**`showPreviewBeforeComplete`** : _str_<br>\nWhether to preview all answers before completion. Can be 'noPreview' (default), 'showAllQuestions', 'showAnsweredQuestions'.\n\n**`showProgressBar`** : _str_<br>\nWhether to show the progress bar. Can be 'off' (default), 'aboveHeader', 'belowHeader', 'bottom', 'topBottom', 'auto'.\n\n**`showQuestionNumbers`** : _bool | str_<br>\nWhether to show the question numbers. Default is True. Can be True, 'on', False, 'off', 'onpage' (number each page anew).\n\n**`showTimerPanel`** : _str_<br>\nWhether to show the timer panel. Can be 'none' (default), 'top', 'bottom'. See `maxTimeToFinish`, `maxTimeToFinishPage`, and `showTimerPanelMode`.\n\n**`showTimerPanelMode`** : _str_<br>\nWhat times to show on the timer panel. Can be 'all' (default), 'page', 'survey'. See `showTimerPanel`.\n\n**`showTitle`** : _bool_<br>\nWhether to show the survey title. Default is True.\n\n**`showTOC`** : _bool_<br>\nWhether to show the table of contents. Default is False. See `tocLocation`.\n\n**`startSurveyText`** : _str | None_<br>\nText for the 'Start' button if `firstPageIsStarted=True`.\n\n**`storeOthersAsComment`** : _bool_<br>\nWhether to store the 'Other' answers in a separate column (True; see `commentSuffix`) or in the question column (False). Default is True.\n\n**`textUpdateMode`** : _str_<br>\nThe mode of updating the text. Can be 'onBlur' (default; update after the field had been unclicked), 'onTyping' (update every key press). Can be overridden for individual questions.\n\n**`title`** : _str | None_<br>\nThe title of the survey.\n\n**`tocLocation`** : _str_<br>\nThe location of the table of contents. Can be 'left' (default), 'right'. See `showTOC`.\n\n**`triggers`** : _str | None_<br>\nTriggers for the survey. Usually not necessary. See <https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#conditional-survey-logic-triggers>.\n\n**`validateVisitedEmptyFields`** : _bool_<br>\nWhether to validate empty fields that had been clicked, and unclicked empty. Default is False.\n\n**`width`** : _str | None_<br>\nWidth of the survey in CSS units. Default is None (inherit from the container).\n\n**`widthMode`** : _str_<br>\nThe mode of the width. Can be 'auto' (default; the width is set by the content), 'static', 'responsive'.\n\n**`addCode`** : _dict | None_<br>\nAdditional code for the survey. Usually not necessary.\n\n**`customCode`** : _str | None_<br>\nCustom JS commands to be added to the survey.\n\n**`customFunctions`** : _str | None_<br>\nCustom JS functions definitions to be added to the survey. To be used with `customCode`.\n\n# `page()`\n\nCreate a page object.\n\n## Signature\n\n::: {#9dd37448 .cell execution_count=2}\n``` {.python .cell-code}\npage(\n    name: str,\n    *questions: QuestionModel | list[QuestionModel],\n    description: str | None = None,\n    enableIf: str | None = None,\n    id: str | None = None,\n    isRequired: bool = False,\n    maxTimeToFinish: int | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    navigationButtonsVisibility: str = 'inherit',\n    navigationDescription: str | None = None,\n    navigationTitle: str | None = None,\n    questionErrorLocation: str = 'default',\n    questionTitleLocation: str = 'default',\n    questionsOrder: str = 'default',\n    readOnly: bool = False,\n    requiredErrorText: str | None = None,\n    requiredIf: str | None = None,\n    state: str = 'default',\n    title: str | None = None,\n    visible: bool = True,\n    visibleIf: str | None = None,\n    visibleIndex: int | None = None,\n    addCode: dict | None = None,\n    **kwargs\n) -> PageModel\n```\n:::\n\n\n## Arguments\n\n**`questions`** : _QuestionModel | list[QuestionModel]_<br>\nThe questions on the page.\n\n**`description`** : _str | None_<br>\nOptional subtitle or description of the page.\n\n**`enableIf`** : _str | None_<br>\nExpression to enable the page.\n\n**`id`** : _str | None_<br>\nHTML id attribute for the page. Usually not necessary.\n\n**`isRequired`** : _bool_<br>\nWhether the page is required (at least one question must be answered).\n\n**`maxTimeToFinish`** : _int | None_<br>\nMaximum time in seconds to finish the page.\n\n**`maxWidth`** : _str_<br>\nMaximum width of the page in CSS units.\n\n**`minWidth`** : _str_<br>\nMinimum width of the page in CSS units.\n\n**`navigationButtonsVisibility`** : _str_<br>\nThe visibility of the navigation buttons. Can be 'inherit', 'show', 'hide'.\n\n**`navigationDescription`** : _str | None_<br>\nDescription for the page navigation.\n\n**`navigationTitle`** : _str | None_<br>\nTitle for the page navigation.\n\n**`questionErrorLocation`** : _str_<br>\nThe location of the error text for the questions. Can be 'default', 'top', 'bottom'.\n\n**`questionTitleLocation`** : _str_<br>\nThe location of the title for the questions. Can be 'default', 'top', 'bottom'.\n\n**`questionsOrder`** : _str_<br>\nThe order of the questions. Can be 'default', 'random'.\n\n**`readOnly`** : _bool_<br>\nWhether the page is read-only.\n\n**`requiredErrorText`** : _str | None_<br>\nError text if the required condition is not met.\n\n**`requiredIf`** : _str | None_<br>\nExpression to make the page required (at least one question must be answered).\n\n**`state`** : _str_<br>\nIf the page should be collapsed or expanded. Can be 'default', 'collapsed', 'expanded'.\n\n**`title`** : _str_<br>\nThe visible title of the page.\n\n**`visible`** : _bool_<br>\nWhether the page is visible.\n\n**`visibleIf`** : _str | None_<br>\nExpression to make the page visible.\n\n**`visibleIndex`** : _int | None_<br>\nThe index at which the page should be visible.\n\n**`width`** : _str_<br>\nWidth of the page\n\n**`addCode`** : _dict | None_<br>\nAdditional code for the survey. Usually not necessary.\n\n**`customCode`** : _str | None_<br>\nCustom JS commands to be added to the survey.\n\n**`customFunctions`** : _str | None_<br>\nCustom JS functions definitions to be added to the survey. To be used with `customCode`.\n\n# `panel()`\n\nCreate a panel.\n\n## Signature\n\n::: {#7d49b31c .cell execution_count=3}\n``` {.python .cell-code}\npanel(\n    name: str,\n    *questions: QuestionModel | list[QuestionModel],\n    description: str | None = None,\n    enableIf: str | None = None,\n    id: str | None = None,\n    innerIndent: int | None = None,\n    isRequired: bool = False,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    questionErrorLocation: str = 'default',\n    questionsOrder: str = 'default',\n    questionStartIndex: str | None = None,\n    questionTitleLocation: str = 'default',\n    questionTitleWidth: str | None = None,\n    readOnly: bool = False,\n    requiredErrorText: str | None = None,\n    requiredIf: str | None = None,\n    rightIndent: int | None = None,\n    showNumber: bool = False,\n    showQuestionNumbers: str = 'default',\n    startWithNewLine: bool = True,\n    visible: bool = True,\n    visibleIf: str | None = None,\n    width: str = '',\n    **kwargs\n) -> PanelModel\n```\n:::\n\n\n## Arguments\n\n**`questions`** : _QuestionModel | list[QuestionModel]_<br>\nThe questions on the panel.\n\n**`description`** : _str | None_<br>\nOptional subtitle or description of the panel.\n\n**`enableIf`** : _str | None_<br>\nExpression to enable the panel.\n\n**`id`** : _str | None_<br>\nHTML id attribute for the panel. Usually not necessary.\n\n**`innerIndent`** : _int | None_<br>\nThe inner indent of the panel.\n\n**`isRequired`** : _bool_<br>\nWhether the panel is required (at least one question must be answered).\n\n**`maxWidth`** : _str_<br>\nMaximum width of the panel in CSS units.\n\n**`minWidth`** : _str_<br>\nMinimum width of the panel in CSS units.\n\n**`questionErrorLocation`** : _str_<br>\nThe location of the error text for the questions. Can be 'default', 'top', 'bottom'.\n\n**`questionsOrder`** : _str_<br>\nThe order of the questions. Can be 'default', 'random'.\n\n**`questionStartIndex`** : _str | None_<br>\nThe number or letter with which the questions numbering should start.\n\n**`questionTitleLocation`** : _str_<br>\nThe location of the title for the questions. Can be 'default', 'top', 'bottom'.\n\n**`questionTitleWidth`** : _str | None_<br>\nThe width of the question title.\n\n**`readOnly`** : _bool_<br>\nWhether the panel is read-only.\n\n**`requiredErrorText`** : _str | None_<br>\nError text if the required condition is not met.\n\n**`requiredIf`** : _str | None_<br>\nExpression to make the panel required (at least one question must be answered).\n\n**`rightIndent`** : _int | None_<br>\nThe right indent of the panel.\n\n**`showNumber`** : _bool_<br>\nWhether to show the panel number.\n\n**`showQuestionNumbers`** : _str_<br>\nWhether to show the question numbers. Can be 'default', 'on', 'off', 'onpage' (number each page anew).\n\n**`startWithNewLine`** : _bool_<br>\nWhether to start the panel on a new line.\n\n**`visible`** : _bool_<br>\nWhether the panel is visible.\n\n**`visibleIf`** : _str | None_<br>\nExpression to make the panel visible.\n\n**`width`** : _str_<br>\nWidth of the panel.\n\n# `dropdown()`\n\nCreate a single-select dropdown question object.\n\n![The dropdown question example](./figs/question_types/dropdown.png)\n\n## Signature\n\n::: {#d1634fc7 .cell execution_count=4}\n``` {.python .cell-code}\ndropdown(\n    name: str,\n    title: str | list[str] | None,\n    *choices: str | dict | list,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    choicesFromQuestion: str | None = None,\n    choicesFromQuestionMode: str = 'all',\n    choicesOrder: str = 'none',\n    showDontKnowItem: bool = False,\n    dontKnowText: str | None = None,\n    hideIfChoicesEmpty: bool | None = None,\n    showNoneItem: bool = False,\n    noneText: str | None = None,\n    otherText: str | None = None,\n    otherErrorText: str | None = None,\n    showRefuseItem: bool = False,\n    refuseText: str | None = None,\n    choicesMax: int | None = None,\n    choicesMin: int | None = None,\n    choicesStep: int | None = None,\n    placeholder: str | None = None,\n    **kwargs\n) -> QuestionDropdownModel | list[QuestionDropdownModel]\n```\n:::\n\n\n## Arguments\n\n**`title`** : _str | None_<br>\nThe visible title of the question. If None, `name` is used.\n\n**`choices`** : _str | dict | list_<br>\nThe choices for the question. Can be string(s) or dictionary(-ies) with structure `{\"value\": ..., \"text\": ...}`. You can also add `visibleIf`, `enableIf`, and `requiredIf` to the dictionary.\n\n**`choicesFromQuestion`** : _str | None_<br>\nThe name of the question to get the choices from if the are to be copied. Use with `choicesFromQuestionMode`.\n\n**`choicesFromQuestionMode`** : _str_<br>\nThe mode of copying choices. Can be 'all', 'selected', 'unselected'.\n\n**`choicesMax`** : _int | None_<br>\nMaximum for automatically generated choices. Use with `choicesMin` and `choicesStep`.\n\n**`choicesMin`** : _int | None_<br>\nMinimum for automatically generated choices. Use with `choicesMax` and `choicesStep`.\n\n**`choicesOrder`** : _str_<br>\nThe order of the choices. Can be 'none', 'asc', 'desc', 'random'.\n\n**`choicesStep`** : _int | None_<br>\nStep for automatically generated choices. Use with `choicesMax` and `choicesMin`.\n\n**`commentPlaceholder`** : _str | None_<br>\nPlaceholder text for the comment area.\n\n**`commentText`** : _str | None_<br>\nText for the comment area.\n\n**`correctAnswer`** : _str | None_<br>\nCorrect answer for the question. Use for quizzes.\n\n**`defaultValue`** : _str | None_<br>\nDefault value for the question.\n\n**`defaultValueExpression`** : _str | None_<br>\nExpression deciding the default value for the question.\n\n**`description`** : _str | None_<br>\nOptional subtitle or description of the question.\n\n**`descriptionLocation`** : _str_<br>\nThe location of the description. Can be 'default', 'underTitle', 'underInput'.\n\n**`dontKnowText`**: str | None = None\n\n**`enableIf`** : _str | None_<br>\nExpression to enable the question.\n\n**`errorLocation`** : _str | None_<br>\nLocation of the error text. Can be 'default' 'top', 'bottom'.\n\n**`hideIfChoicesEmpty`**: bool | None = None\n\n**`hideNumber`** : _bool_<br>\nWhether to hide the question number.\n\n**`id`** : _str | None_<br>\nHTML id attribute for the question. Usually not necessary.\n\n**`maxWidth`** : _str_<br>\nMaximum width of the question in CSS units.\n\n**`minWidth`** : _str_<br>\nMinimum width of the question in CSS units.\n\n**`noneText`**: str | None = None\n\n**`otherErrorText`**: str | None = None\n\n**`otherText`**: str | None = None\n\n**`placeholder`** : _str | None_<br>\nPlaceholder text.\n\n**`readOnly`** : _bool_<br>\nWhether the question is read-only.\n\n**`refuseText`**: str | None = None\n\n**`isRequired`** : _bool_<br>\nWhether the question is required.\n\n**`requiredErrorText`** : _str | None_<br>\nError text if the required condition is not met.\n\n**`requiredIf`** : _str | None_<br>\nExpression to make the question required.\n\n**`resetValueIf`** : _str | None_<br>\nExpression to reset the value of the question.\n\n**`setValueExpression`** : _str | None_<br>\nExpression to decide on the value of the question to be set. Requires `setValueIf`.\n\n**`setValueIf`** : _str | None_<br>\nExpression with a condition to set the value of the question. Requires `setValueExpression`.\n\n**`showCommentArea`** : _bool_<br>\nWhether to show the comment area. Doesn't work with `showOtherItem`.\n\n**`showDontKnowItem`**: bool = False\n\n**`showNoneItem`**: bool = False\n\n**`showOtherItem`** : _bool_<br>\nWhether to show the 'Other' item. Doesn't work with `showCommentArea`.\n\n**`showOtherItem`**: bool = False\n\n**`showRefuseItem`**: bool = False\n\n**`startWithNewLine`** : _bool_<br>\nWhether to start the question on a new line.\n\n**`state`** : _str | None_<br>\nIf the question should be collapsed or expanded. Can be 'default', 'collapsed', 'expanded'.\n\n**`titleLocation`** : _str_<br>\nThe location of the title. Can be 'default', 'top', 'bottom', 'left', 'hidden'.\n\n**`useDisplayValuesInDynamicTexts`** : _bool_<br>\nWhether to use display names for question values in placeholders.\n\n**`validators`** : _ValidatorModel | list[ValidatorModel] | None_<br>\nValidator(s) for the question.\n\n**`visible`** : _bool_<br>\nWhether the question is visible.\n\n**`visibleIf`** : _str | None_<br>\nExpression to make the question visible.\n\n**`width`** : _str_<br>\nWidth of the question in CSS units.\n\n**`addCode`** : _dict | None_<br>\nAdditional code for the question. Usually not necessary.\n\n**`customCode`** : _str | None_<br>\nCustom JS commands to be added to the survey.\n\n**`customFunctions`** : _str | None_<br>\nCustom JS functions definitions to be added to the survey. To be used with `customCode`.\n\n# `text()`\n\nCreate a text question object.\n\n![The text question example](./figs/question_types/text.png)\n\n## Signature\n\n::: {#fd9271e8 .cell execution_count=5}\n``` {.python .cell-code}\ntext(\n    name: str,\n    *title: str | list[str] | None,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    autocomplete: str | None = None,\n    inputType: str = 'text',\n    max: str | int | None = None,\n    maxErrorText: str | None = None,\n    maxLength: int | None = None,\n    maxValueExpression: str | None = None,\n    min: str | int | None = None,\n    minErrorText: str | None = None,\n    minValueExpression: str | None = None,\n    placeholder: str | None = None,\n    size: int | None = None,\n    step: str | None = None,\n    textUpdateMode: str = 'default',\n    **kwargs\n) -> QuestionTextModel\n```\n:::\n\n\n## Arguments\n\n**`title`** : _str | None_<br>\nThe visible title of the question. If None, `name` is used.\n\n**`autocomplete`** : _str | None_<br>\nA value of `autocomplete` attribute for `<input>`. See MDN for a list: <https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#token_list_tokens>.\n\n**`commentPlaceholder`** : _str | None_<br>\nPlaceholder text for the comment area.\n\n**`commentText`** : _str | None_<br>\nText for the comment area.\n\n**`correctAnswer`** : _str | None_<br>\nCorrect answer for the question. Use for quizzes.\n\n**`defaultValue`** : _str | None_<br>\nDefault value for the question.\n\n**`defaultValueExpression`** : _str | None_<br>\nExpression deciding the default value for the question.\n\n**`description`** : _str | None_<br>\nOptional subtitle or description of the question.\n\n**`descriptionLocation`** : _str_<br>\nThe location of the description. Can be 'default', 'underTitle', 'underInput'.\n\n**`enableIf`** : _str | None_<br>\nExpression to enable the question.\n\n**`errorLocation`** : _str | None_<br>\nLocation of the error text. Can be 'default' 'top', 'bottom'.\n\n**`hideNumber`** : _bool_<br>\nWhether to hide the question number.\n\n**`id`** : _str | None_<br>\nHTML id attribute for the question. Usually not necessary.\n\n**`inputType`** : _str | None_<br>\nThe type of the input. Can be 'text', 'password', 'email', 'url', 'tel', 'number', 'date', 'datetime-local', 'time', 'month', 'week', 'color'.\n\n**`max`** : _str_<br>\nThe `max` attribute of `<input>`. Syntax depends on the `inputType`. See MDN for details: <https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/max>.\n\n**`maxErrorText`** : _str | None_<br>\nError text if the value exceeds `max`.\n\n**`maxLength`** : _int | None_<br>\nThe maximum length of the input in characters. Use 0 for no limit. Use -1 for the default limit.\n\n**`maxValueExpression`** : _str | None_<br>\nExpression to decide the maximum value.\n\n**`maxWidth`** : _str_<br>\nMaximum width of the question in CSS units.\n\n**`min`** : _str | None_<br>\nThe `min` attribute of `<input>`. Syntax depends on the `inputType`. See MDN for details: <https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/min>.\n\n**`minErrorText`** : _str | None_<br>\nError text if the value is less than `min`.\n\n**`minValueExpression`** : _str | None_<br>\nExpression to decide the minimum value.\n\n**`minWidth`** : _str_<br>\nMinimum width of the question in CSS units.\n\n**`placeholder`** : _str | None_<br>\nPlaceholder text for the input.\n\n**`readOnly`** : _bool_<br>\nWhether the question is read-only.\n\n**`isRequired`** : _bool_<br>\nWhether the question is required.\n\n**`requiredErrorText`** : _str | None_<br>\nError text if the required condition is not met.\n\n**`requiredIf`** : _str | None_<br>\nExpression to make the question required.\n\n**`resetValueIf`** : _str | None_<br>\nExpression to reset the value of the question.\n\n**`setValueExpression`** : _str | None_<br>\nExpression to decide on the value of the question to be set. Requires `setValueIf`.\n\n**`setValueIf`** : _str | None_<br>\nExpression with a condition to set the value of the question. Requires `setValueExpression`.\n\n**`showCommentArea`** : _bool_<br>\nWhether to show the comment area. Doesn't work with `showOtherItem`.\n\n**`showOtherItem`** : _bool_<br>\nWhether to show the 'Other' item. Doesn't work with `showCommentArea`.\n\n**`size`** : _int | None_<br>\nThe width of the input in characters. A value for `size` attribute of `<input>`.\n\n**`startWithNewLine`** : _bool_<br>\nWhether to start the question on a new line.\n\n**`state`** : _str | None_<br>\nIf the question should be collapsed or expanded. Can be 'default', 'collapsed', 'expanded'.\n\n**`step`** : _str | None_<br>\nThe `step` attribute of `<input>`. Syntax depends on the `inputType`. See MDN for details: <https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step>.\n\n**`textUpdateMode`** : _str_<br>\nThe mode of updating the text. Can be 'default', 'onBlur' (update after the field had been unclicked), 'onTyping' (update every key press).\n\n**`titleLocation`** : _str_<br>\nThe location of the title. Can be 'default', 'top', 'bottom', 'left', 'hidden'.\n\n**`useDisplayValuesInDynamicTexts`** : _bool_<br>\nWhether to use display names for question values in placeholders.\n\n**`validators`** : _ValidatorModel | list[ValidatorModel] | None_<br>\nValidator(s) for the question.\n\n**`visible`** : _bool_<br>\nWhether the question is visible.\n\n**`visibleIf`** : _str | None_<br>\nExpression to make the question visible.\n\n**`width`** : _str_<br>\nWidth of the question in CSS units.\n\n**`addCode`** : _dict | None_<br>\nAdditional code for the question. Usually not necessary.\n\n**`customCode`** : _str | None_<br>\nCustom JS commands to be added to the survey.\n\n**`customFunctions`** : _str | None_<br>\nCustom JS functions definitions to be added to the survey. To be used with `customCode`.\n\n# `checkbox()`\n\nCreate a checkbox question object.\n\n![The checkbox question example](./figs/question_types/checkbox.png)\n\n## Signature\n\n::: {#9a9782d0 .cell execution_count=6}\n``` {.python .cell-code}\ncheckbox(\n    name: str,\n    title: str | list[str] | None,\n    *choices: str | dict | list,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    choicesFromQuestion: str | None = None,\n    choicesFromQuestionMode: str = 'all',\n    choicesOrder: str = 'none',\n    showDontKnowItem: bool = False,\n    dontKnowText: str | None = None,\n    hideIfChoicesEmpty: bool | None = None,\n    showNoneItem: bool = False,\n    noneText: str | None = None,\n    otherText: str | None = None,\n    otherErrorText: str | None = None,\n    showRefuseItem: bool = False,\n    refuseText: str | None = None,\n    colCount: int | None = None,\n    isAllSelected: bool | None = None,\n    maxSelectedChoices: int = 0,\n    minSelectedChoices: int = 0,\n    selectAllText: str | None = None,\n    showSelectAllItem: bool | None = None,\n    **kwargs\n) -> QuestionCheckboxModel | list[QuestionCheckboxModel]\n```\n:::\n\n\n## Arguments\n\n**`title`** : _str | None_<br>\nThe visible title of the question. If None, `name` is used.\n\n**`choices`** : _str | dict | list_<br>\nThe choices for the question. Can be string(s) or dictionary(-ies) with structure `{\"value\": ..., \"text\": ...}`. You can also add `visibleIf`, `enableIf`, and `requiredIf` to the dictionary.\n\n**`choicesFromQuestion`** : _str | None_<br>\nThe name of the question to get the choices from if the are to be copied. Use with `choicesFromQuestionMode`.\n\n**`choicesFromQuestionMode`** : _str_<br>\nThe mode of copying choices. Can be 'all', 'selected', 'unselected'.\n\n**`choicesOrder`** : _str_<br>\nThe order of the choices. Can be 'none', 'asc', 'desc', 'random'.\n\n**`colCount`** : _int | None_<br>\nThe number of columns for the choices. 0 means a single line.\n\n**`commentPlaceholder`** : _str | None_<br>\nPlaceholder text for the comment area.\n\n**`commentText`** : _str | None_<br>\nText for the comment area.\n\n**`correctAnswer`** : _str | None_<br>\nCorrect answer for the question. Use for quizzes.\n\n**`defaultValue`** : _str | None_<br>\nDefault value for the question.\n\n**`defaultValueExpression`** : _str | None_<br>\nExpression deciding the default value for the question.\n\n**`description`** : _str | None_<br>\nOptional subtitle or description of the question.\n\n**`descriptionLocation`** : _str_<br>\nThe location of the description. Can be 'default', 'underTitle', 'underInput'.\n\n**`dontKnowText`**: str | None = None\n\n**`enableIf`** : _str | None_<br>\nExpression to enable the question.\n\n**`errorLocation`** : _str | None_<br>\nLocation of the error text. Can be 'default' 'top', 'bottom'.\n\n**`hideIfChoicesEmpty`**: bool | None = None\n\n**`hideNumber`** : _bool_<br>\nWhether to hide the question number.\n\n**`id`** : _str | None_<br>\nHTML id attribute for the question. Usually not necessary.\n\n**`isAllSelected`** : _bool | None_<br>\nStart with all choices selected. Default is False.\n\n**`maxSelectedChoices`** : _int_<br>\nMaximum number of selected choices. 0 means no limit.\n\n**`maxWidth`** : _str_<br>\nMaximum width of the question in CSS units.\n\n**`minSelectedChoices`** : _int_<br>\nMinimum number of selected choices. 0 means no limit.\n\n**`minWidth`** : _str_<br>\nMinimum width of the question in CSS units.\n\n**`noneText`**: str | None = None\n\n**`otherErrorText`**: str | None = None\n\n**`otherText`**: str | None = None\n\n**`readOnly`** : _bool_<br>\nWhether the question is read-only.\n\n**`refuseText`**: str | None = None\n\n**`isRequired`** : _bool_<br>\nWhether the question is required.\n\n**`requiredErrorText`** : _str | None_<br>\nError text if the required condition is not met.\n\n**`requiredIf`** : _str | None_<br>\nExpression to make the question required.\n\n**`resetValueIf`** : _str | None_<br>\nExpression to reset the value of the question.\n\n**`selectAllText`** : _str | None_<br>\nText for the 'Select All' item.\n\n**`setValueExpression`** : _str | None_<br>\nExpression to decide on the value of the question to be set. Requires `setValueIf`.\n\n**`setValueIf`** : _str | None_<br>\nExpression with a condition to set the value of the question. Requires `setValueExpression`.\n\n**`showCommentArea`** : _bool_<br>\nWhether to show the comment area. Doesn't work with `showOtherItem`.\n\n**`showDontKnowItem`**: bool = False\n\n**`showNoneItem`**: bool = False\n\n**`showOtherItem`** : _bool_<br>\nWhether to show the 'Other' item. Doesn't work with `showCommentArea`.\n\n**`showOtherItem`**: bool = False\n\n**`showRefuseItem`**: bool = False\n\n**`showSelectAllItem`** : _bool | None_<br>\nWhether to show the 'Select All' item.\n\n**`startWithNewLine`** : _bool_<br>\nWhether to start the question on a new line.\n\n**`state`** : _str | None_<br>\nIf the question should be collapsed or expanded. Can be 'default', 'collapsed', 'expanded'.\n\n**`titleLocation`** : _str_<br>\nThe location of the title. Can be 'default', 'top', 'bottom', 'left', 'hidden'.\n\n**`useDisplayValuesInDynamicTexts`** : _bool_<br>\nWhether to use display names for question values in placeholders.\n\n**`validators`** : _ValidatorModel | list[ValidatorModel] | None_<br>\nValidator(s) for the question.\n\n**`visible`** : _bool_<br>\nWhether the question is visible.\n\n**`visibleIf`** : _str | None_<br>\nExpression to make the question visible.\n\n**`width`** : _str_<br>\nWidth of the question in CSS units.\n\n**`addCode`** : _dict | None_<br>\nAdditional code for the question. Usually not necessary.\n\n**`customCode`** : _str | None_<br>\nCustom JS commands to be added to the survey.\n\n**`customFunctions`** : _str | None_<br>\nCustom JS functions definitions to be added to the survey. To be used with `customCode`.\n\n# `ranking()`\n\nCreate a ranking question object.\n\n![The ranking question example](./figs/question_types/ranking.png)\n\n## Signature\n\n::: {#12af09cf .cell execution_count=7}\n``` {.python .cell-code}\nranking(\n    name: str,\n    title: str | list[str] | None,\n    *choices: str | dict | list,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    choicesFromQuestion: str | None = None,\n    choicesFromQuestionMode: str = 'all',\n    choicesOrder: str = 'none',\n    showDontKnowItem: bool = False,\n    dontKnowText: str | None = None,\n    hideIfChoicesEmpty: bool | None = None,\n    showNoneItem: bool = False,\n    noneText: str | None = None,\n    otherText: str | None = None,\n    otherErrorText: str | None = None,\n    showRefuseItem: bool = False,\n    refuseText: str | None = None,\n    colCount: int | None = None,\n    isAllSelected: bool | None = None,\n    maxSelectedChoices: int = 0,\n    minSelectedChoices: int = 0,\n    selectAllText: str | None = None,\n    showSelectAllItem: bool | None = None,\n    longTap: bool = True,\n    selectToRankAreasLayout: str = 'horizontal',\n    selectToRankEmptyRankedAreaText: str | None = None,\n    selectToRankEmptyUnrankedAreaText: str | None = None,\n    selectToRankEnabled: bool = False,\n    **kwargs\n) -> QuestionRankingModel | list[QuestionRankingModel]\n```\n:::\n\n\n## Arguments\n\n**`title`** : _str | None_<br>\nThe visible title of the question. If None, `name` is used.\n\n**`choices`** : _str | dict | list_<br>\nThe choices for the question. Can be string(s) or dictionary(-ies) with structure `{\"value\": ..., \"text\": ...}`. You can also add `visibleIf`, `enableIf`, and `requiredIf` to the dictionary.\n\n**`choicesFromQuestion`** : _str | None_<br>\nThe name of the question to get the choices from if the are to be copied. Use with `choicesFromQuestionMode`.\n\n**`choicesFromQuestionMode`** : _str_<br>\nThe mode of copying choices. Can be 'all', 'selected', 'unselected'.\n\n**`choicesOrder`** : _str_<br>\nThe order of the choices. Can be 'none', 'asc', 'desc', 'random'.\n\n**`colCount`** : _int | None_<br>\nThe number of columns for the choices. 0 means a single line.\n\n**`commentPlaceholder`** : _str | None_<br>\nPlaceholder text for the comment area.\n\n**`commentText`** : _str | None_<br>\nText for the comment area.\n\n**`correctAnswer`** : _str | None_<br>\nCorrect answer for the question. Use for quizzes.\n\n**`defaultValue`** : _str | None_<br>\nDefault value for the question.\n\n**`defaultValueExpression`** : _str | None_<br>\nExpression deciding the default value for the question.\n\n**`description`** : _str | None_<br>\nOptional subtitle or description of the question.\n\n**`descriptionLocation`** : _str_<br>\nThe location of the description. Can be 'default', 'underTitle', 'underInput'.\n\n**`dontKnowText`**: str | None = None\n\n**`enableIf`** : _str | None_<br>\nExpression to enable the question.\n\n**`errorLocation`** : _str | None_<br>\nLocation of the error text. Can be 'default' 'top', 'bottom'.\n\n**`hideIfChoicesEmpty`**: bool | None = None\n\n**`hideNumber`** : _bool_<br>\nWhether to hide the question number.\n\n**`id`** : _str | None_<br>\nHTML id attribute for the question. Usually not necessary.\n\n**`isAllSelected`** : _bool | None_<br>\nStart with all choices selected. Default is False.\n\n**`longTap`** : _bool_<br>\nWhether to use long tap for dragging on mobile devices.\n\n**`maxSelectedChoices`** : _int_<br>\nMaximum number of selected choices. 0 means no limit.\n\n**`maxWidth`** : _str_<br>\nMaximum width of the question in CSS units.\n\n**`minSelectedChoices`** : _int_<br>\nMinimum number of selected choices. 0 means no limit.\n\n**`minWidth`** : _str_<br>\nMinimum width of the question in CSS units.\n\n**`noneText`**: str | None = None\n\n**`otherErrorText`**: str | None = None\n\n**`otherText`**: str | None = None\n\n**`readOnly`** : _bool_<br>\nWhether the question is read-only.\n\n**`refuseText`**: str | None = None\n\n**`isRequired`** : _bool_<br>\nWhether the question is required.\n\n**`requiredErrorText`** : _str | None_<br>\nError text if the required condition is not met.\n\n**`requiredIf`** : _str | None_<br>\nExpression to make the question required.\n\n**`resetValueIf`** : _str | None_<br>\nExpression to reset the value of the question.\n\n**`selectAllText`** : _str | None_<br>\nText for the 'Select All' item.\n\n**`selectToRankAreasLayout`** : _str_<br>\nThe layout of the ranked and unranked areas when `selectToRankEnabled=True`. Can be 'horizontal', 'vertical'.\n\n**`selectToRankEmptyRankedAreaText`** : _str | None_<br>\nText for the empty ranked area when `selectToRankEnabled=True`.\n\n**`selectToRankEmptyUnrankedAreaText`** : _str | None_<br>\nText for the empty unranked area when `selectToRankEnabled=True`.\n\n**`selectToRankEnabled`** : _bool_<br>\nWhether user should select items they want to rank before ranking them. Default is False.\n\n**`setValueExpression`** : _str | None_<br>\nExpression to decide on the value of the question to be set. Requires `setValueIf`.\n\n**`setValueIf`** : _str | None_<br>\nExpression with a condition to set the value of the question. Requires `setValueExpression`.\n\n**`showCommentArea`** : _bool_<br>\nWhether to show the comment area. Doesn't work with `showOtherItem`.\n\n**`showDontKnowItem`**: bool = False\n\n**`showNoneItem`**: bool = False\n\n**`showOtherItem`** : _bool_<br>\nWhether to show the 'Other' item. Doesn't work with `showCommentArea`.\n\n**`showOtherItem`**: bool = False\n\n**`showRefuseItem`**: bool = False\n\n**`showSelectAllItem`** : _bool | None_<br>\nWhether to show the 'Select All' item.\n\n**`startWithNewLine`** : _bool_<br>\nWhether to start the question on a new line.\n\n**`state`** : _str | None_<br>\nIf the question should be collapsed or expanded. Can be 'default', 'collapsed', 'expanded'.\n\n**`titleLocation`** : _str_<br>\nThe location of the title. Can be 'default', 'top', 'bottom', 'left', 'hidden'.\n\n**`useDisplayValuesInDynamicTexts`** : _bool_<br>\nWhether to use display names for question values in placeholders.\n\n**`validators`** : _ValidatorModel | list[ValidatorModel] | None_<br>\nValidator(s) for the question.\n\n**`visible`** : _bool_<br>\nWhether the question is visible.\n\n**`visibleIf`** : _str | None_<br>\nExpression to make the question visible.\n\n**`width`** : _str_<br>\nWidth of the question in CSS units.\n\n**`addCode`** : _dict | None_<br>\nAdditional code for the question. Usually not necessary.\n\n**`customCode`** : _str | None_<br>\nCustom JS commands to be added to the survey.\n\n**`customFunctions`** : _str | None_<br>\nCustom JS functions definitions to be added to the survey. To be used with `customCode`.\n\n# `radio()`\n\nCreate a radio question object.\n\n![The radio question example](./figs/question_types/radio.png)\n\n## Signature\n\n::: {#2e4b0510 .cell execution_count=8}\n``` {.python .cell-code}\nradio(\n    name: str,\n    title: str | list[str] | None,\n    *choices: str | dict | list,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    choicesFromQuestion: str | None = None,\n    choicesFromQuestionMode: str = 'all',\n    choicesOrder: str = 'none',\n    showDontKnowItem: bool = False,\n    dontKnowText: str | None = None,\n    hideIfChoicesEmpty: bool | None = None,\n    showNoneItem: bool = False,\n    noneText: str | None = None,\n    otherText: str | None = None,\n    otherErrorText: str | None = None,\n    showRefuseItem: bool = False,\n    refuseText: str | None = None,\n    colCount: int | None = None,\n    showClearButton: bool = False,\n    **kwargs\n) -> QuestionRadiogroupModel | list[QuestionRadiogroupModel]\n```\n:::\n\n\n## Arguments\n\n**`title`** : _str | None_<br>\nThe visible title of the question. If None, `name` is used.\n\n**`choices`** : _str | dict | list_<br>\nThe choices for the question. Can be string(s) or dictionary(-ies) with structure `{\"value\": ..., \"text\": ...}`. You can also add `visibleIf`, `enableIf`, and `requiredIf` to the dictionary.\n\n**`choicesFromQuestion`** : _str | None_<br>\nThe name of the question to get the choices from if the are to be copied. Use with `choicesFromQuestionMode`.\n\n**`choicesFromQuestionMode`** : _str_<br>\nThe mode of copying choices. Can be 'all', 'selected', 'unselected'.\n\n**`choicesOrder`** : _str_<br>\nThe order of the choices. Can be 'none', 'asc', 'desc', 'random'.\n\n**`commentPlaceholder`** : _str | None_<br>\nPlaceholder text for the comment area.\n\n**`commentText`** : _str | None_<br>\nText for the comment area.\n\n**`correctAnswer`** : _str | None_<br>\nCorrect answer for the question. Use for quizzes.\n\n**`colCount`** : _int | None_<br>\nThe number of columns for the choices. 0 means a single line.\n\n**`defaultValue`** : _str | None_<br>\nDefault value for the question.\n\n**`defaultValueExpression`** : _str | None_<br>\nExpression deciding the default value for the question.\n\n**`description`** : _str | None_<br>\nOptional subtitle or description of the question.\n\n**`descriptionLocation`** : _str_<br>\nThe location of the description. Can be 'default', 'underTitle', 'underInput'.\n\n**`dontKnowText`**: str | None = None\n\n**`enableIf`** : _str | None_<br>\nExpression to enable the question.\n\n**`errorLocation`** : _str | None_<br>\nLocation of the error text. Can be 'default' 'top', 'bottom'.\n\n**`hideIfChoicesEmpty`**: bool | None = None\n\n**`hideNumber`** : _bool_<br>\nWhether to hide the question number.\n\n**`id`** : _str | None_<br>\nHTML id attribute for the question. Usually not necessary.\n\n**`maxWidth`** : _str_<br>\nMaximum width of the question in CSS units.\n\n**`minWidth`** : _str_<br>\nMinimum width of the question in CSS units.\n\n**`noneText`**: str | None = None\n\n**`otherErrorText`**: str | None = None\n\n**`otherText`**: str | None = None\n\n**`readOnly`** : _bool_<br>\nWhether the question is read-only.\n\n**`refuseText`**: str | None = None\n\n**`isRequired`** : _bool_<br>\nWhether the question is required.\n\n**`requiredErrorText`** : _str | None_<br>\nError text if the required condition is not met.\n\n**`requiredIf`** : _str | None_<br>\nExpression to make the question required.\n\n**`resetValueIf`** : _str | None_<br>\nExpression to reset the value of the question.\n\n**`setValueExpression`** : _str | None_<br>\nExpression to decide on the value of the question to be set. Requires `setValueIf`.\n\n**`setValueIf`** : _str | None_<br>\nExpression with a condition to set the value of the question. Requires `setValueExpression`.\n\n**`showClearButton`** : _bool_<br>\nShow a button to clear the answer.\n\n**`showCommentArea`** : _bool_<br>\nWhether to show the comment area. Doesn't work with `showOtherItem`.\n\n**`showDontKnowItem`**: bool = False\n\n**`showNoneItem`**: bool = False\n\n**`showOtherItem`** : _bool_<br>\nWhether to show the 'Other' item. Doesn't work with `showCommentArea`.\n\n**`showOtherItem`**: bool = False\n\n**`showRefuseItem`**: bool = False\n\n**`startWithNewLine`** : _bool_<br>\nWhether to start the question on a new line.\n\n**`state`** : _str | None_<br>\nIf the question should be collapsed or expanded. Can be 'default', 'collapsed', 'expanded'.\n\n**`titleLocation`** : _str_<br>\nThe location of the title. Can be 'default', 'top', 'bottom', 'left', 'hidden'.\n\n**`useDisplayValuesInDynamicTexts`** : _bool_<br>\nWhether to use display names for question values in placeholders.\n\n**`validators`** : _ValidatorModel | list[ValidatorModel] | None_<br>\nValidator(s) for the question.\n\n**`visible`** : _bool_<br>\nWhether the question is visible.\n\n**`visibleIf`** : _str | None_<br>\nExpression to make the question visible.\n\n**`width`** : _str_<br>\nWidth of the question in CSS units.\n\n**`addCode`** : _dict | None_<br>\nAdditional code for the question. Usually not necessary.\n\n**`customCode`** : _str | None_<br>\nCustom JS commands to be added to the survey.\n\n**`customFunctions`** : _str | None_<br>\nCustom JS functions definitions to be added to the survey. To be used with `customCode`.\n\n\n\n**`Returns`**:\n\n**`QuestionRadiogroupModel`**: The question object model or a list of question object models if `title` is a list.\n\n# `dropdownMultiple()`\n\nCreate a multiple dropdown question object.\n\n![The dropdownMultiple question example](./figs/question_types/dropdownMultiple.png)\n\n## Signature\n\n::: {#671b8ac8 .cell execution_count=9}\n``` {.python .cell-code}\ndropdownMultiple(\n    name: str,\n    title: str | list[str] | None,\n    *choices: str | dict | list,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    choicesFromQuestion: str | None = None,\n    choicesFromQuestionMode: str = 'all',\n    choicesOrder: str = 'none',\n    showDontKnowItem: bool = False,\n    dontKnowText: str | None = None,\n    hideIfChoicesEmpty: bool | None = None,\n    showNoneItem: bool = False,\n    noneText: str | None = None,\n    otherText: str | None = None,\n    otherErrorText: str | None = None,\n    showRefuseItem: bool = False,\n    refuseText: str | None = None,\n    colCount: int | None = None,\n    isAllSelected: bool | None = None,\n    maxSelectedChoices: int = 0,\n    minSelectedChoices: int = 0,\n    selectAllText: str | None = None,\n    showSelectAllItem: bool | None = None,\n    allowClear: bool = True,\n    closeOnSelect: int | None = None,\n    hideSelectedItems: bool | None = False,\n    placeholder: str | None = None,\n    searchEnabled: bool = True,\n    searchMode: str = 'contains',\n    **kwargs\n) -> QuestionTagboxModel | list[QuestionTagboxModel]\n```\n:::\n\n\n## Arguments\n\n**`title`** : _str | None_<br>\nThe visible title of the question. If None, `name` is used.\n\n**`choices`** : _str | dict | list_<br>\nThe choices for the question. Can be string(s) or dictionary(-ies) with structure `{\"value\": ..., \"text\": ...}`. You can also add `visibleIf`, `enableIf`, and `requiredIf` to the dictionary.\n\n**`allowClear`** : _str_<br>\nWhether to show the 'Clear' button for each answer.\n\n**`choicesFromQuestion`** : _str | None_<br>\nThe name of the question to get the choices from if the are to be copied. Use with `choicesFromQuestionMode`.\n\n**`choicesFromQuestionMode`** : _str_<br>\nThe mode of copying choices. Can be 'all', 'selected', 'unselected'.\n\n**`choicesOrder`** : _str_<br>\nThe order of the choices. Can be 'none', 'asc', 'desc', 'random'.\n\n**`closeOnSelect`** : _int | None_<br>\nWhether to close the dropdown after user selects a specified number of items.\n\n**`colCount`** : _int | None_<br>\nThe number of columns for the choices. 0 means a single line.\n\n**`commentPlaceholder`** : _str | None_<br>\nPlaceholder text for the comment area.\n\n**`commentText`** : _str | None_<br>\nText for the comment area.\n\n**`correctAnswer`** : _str | None_<br>\nCorrect answer for the question. Use for quizzes.\n\n**`defaultValue`** : _str | None_<br>\nDefault value for the question.\n\n**`defaultValueExpression`** : _str | None_<br>\nExpression deciding the default value for the question.\n\n**`description`** : _str | None_<br>\nOptional subtitle or description of the question.\n\n**`descriptionLocation`** : _str_<br>\nThe location of the description. Can be 'default', 'underTitle', 'underInput'.\n\n**`dontKnowText`**: str | None = None\n\n**`enableIf`** : _str | None_<br>\nExpression to enable the question.\n\n**`errorLocation`** : _str | None_<br>\nLocation of the error text. Can be 'default' 'top', 'bottom'.\n\n**`hideIfChoicesEmpty`**: bool | None = None\n\n**`hideNumber`** : _bool_<br>\nWhether to hide the question number.\n\n**`hideSelectedItems`** : _bool | None_<br>\nWhether to hide selected items in the dropdown.\n\n**`id`** : _str | None_<br>\nHTML id attribute for the question. Usually not necessary.\n\n**`isAllSelected`** : _bool | None_<br>\nStart with all choices selected. Default is False.\n\n**`maxSelectedChoices`** : _int_<br>\nMaximum number of selected choices. 0 means no limit.\n\n**`maxWidth`** : _str_<br>\nMaximum width of the question in CSS units.\n\n**`minSelectedChoices`** : _int_<br>\nMinimum number of selected choices. 0 means no limit.\n\n**`minWidth`** : _str_<br>\nMinimum width of the question in CSS units.\n\n**`noneText`**: str | None = None\n\n**`otherErrorText`**: str | None = None\n\n**`otherText`**: str | None = None\n\n**`placeholder`** : _str | None_<br>\nPlaceholder text for the input with no value.\n\n**`readOnly`** : _bool_<br>\nWhether the question is read-only.\n\n**`refuseText`**: str | None = None\n\n**`isRequired`** : _bool_<br>\nWhether the question is required.\n\n**`requiredErrorText`** : _str | None_<br>\nError text if the required condition is not met.\n\n**`requiredIf`** : _str | None_<br>\nExpression to make the question required.\n\n**`resetValueIf`** : _str | None_<br>\nExpression to reset the value of the question.\n\n**`searchEnabled`** : _bool_<br>\nWhether to enable search in the dropdown.\n\n**`searchMode`** : _str_<br>\nThe search mode. Can be 'contains' (default), 'startsWith'. Works only if `searchEnabled=True`.\n\n**`selectAllText`** : _str | None_<br>\nText for the 'Select All' item.\n\n**`setValueExpression`** : _str | None_<br>\nExpression to decide on the value of the question to be set. Requires `setValueIf`.\n\n**`setValueIf`** : _str | None_<br>\nExpression with a condition to set the value of the question. Requires `setValueExpression`.\n\n**`showCommentArea`** : _bool_<br>\nWhether to show the comment area. Doesn't work with `showOtherItem`.\n\n**`showDontKnowItem`**: bool = False\n\n**`showNoneItem`**: bool = False\n\n**`showOtherItem`** : _bool_<br>\nWhether to show the 'Other' item. Doesn't work with `showCommentArea`.\n\n**`showOtherItem`**: bool = False\n\n**`showRefuseItem`**: bool = False\n\n**`showSelectAllItem`** : _bool | None_<br>\nWhether to show the 'Select All' item.\n\n**`startWithNewLine`** : _bool_<br>\nWhether to start the question on a new line.\n\n**`state`** : _str | None_<br>\nIf the question should be collapsed or expanded. Can be 'default', 'collapsed', 'expanded'.\n\n**`titleLocation`** : _str_<br>\nThe location of the title. Can be 'default', 'top', 'bottom', 'left', 'hidden'.\n\n**`useDisplayValuesInDynamicTexts`** : _bool_<br>\nWhether to use display names for question values in placeholders.\n\n**`validators`** : _ValidatorModel | list[ValidatorModel] | None_<br>\nValidator(s) for the question.\n\n**`visible`** : _bool_<br>\nWhether the question is visible.\n\n**`visibleIf`** : _str | None_<br>\nExpression to make the question visible.\n\n**`width`** : _str_<br>\nWidth of the question in CSS units.\n\n**`addCode`** : _dict | None_<br>\nAdditional code for the question. Usually not necessary.\n\n**`customCode`** : _str | None_<br>\nCustom JS commands to be added to the survey.\n\n**`customFunctions`** : _str | None_<br>\nCustom JS functions definitions to be added to the survey. To be used with `customCode`.\n\n# `textLong()`\n\nCreate a long text question object.\n\n![The textLong question example](./figs/question_types/textLong.png)\n\n## Signature\n\n::: {#c49eeed3 .cell execution_count=10}\n``` {.python .cell-code}\ntextLong(\n    name: str,\n    *title: str | list[str] | None,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    acceptCarriageReturn: bool = True,\n    allowResize: bool | None = None,\n    autoGrow: bool | None = None,\n    rows: int = 4,\n    **kwargs\n) -> QuestionCommentModel | list[QuestionCommentModel]\n```\n:::\n\n\n## Arguments\n\n**`title`** : _str | None_<br>\nThe visible title of the question. If None, `name` is used.\n\n**`acceptCarriageReturn`** : _bool_<br>\nWhether to allow line breaks. Default is True.\n\n**`allowResize`** : _bool_<br>\nWhether to allow resizing the input field. Default is True.\n\n**`autoGrow`** : _bool_<br>\nWhether to automatically grow the input field. Default is False.\n\n**`commentPlaceholder`** : _str | None_<br>\nPlaceholder text for the comment area.\n\n**`commentText`** : _str | None_<br>\nText for the comment area.\n\n**`correctAnswer`** : _str | None_<br>\nCorrect answer for the question. Use for quizzes.\n\n**`defaultValue`** : _str | None_<br>\nDefault value for the question.\n\n**`defaultValueExpression`** : _str | None_<br>\nExpression deciding the default value for the question.\n\n**`description`** : _str | None_<br>\nOptional subtitle or description of the question.\n\n**`descriptionLocation`** : _str_<br>\nThe location of the description. Can be 'default', 'underTitle', 'underInput'.\n\n**`enableIf`** : _str | None_<br>\nExpression to enable the question.\n\n**`errorLocation`** : _str | None_<br>\nLocation of the error text. Can be 'default' 'top', 'bottom'.\n\n**`hideNumber`** : _bool_<br>\nWhether to hide the question number.\n\n**`id`** : _str | None_<br>\nHTML id attribute for the question. Usually not necessary.\n\n**`maxWidth`** : _str_<br>\nMaximum width of the question in CSS units.\n\n**`minWidth`** : _str_<br>\nMinimum width of the question in CSS units.\n\n**`readOnly`** : _bool_<br>\nWhether the question is read-only.\n\n**`isRequired`** : _bool_<br>\nWhether the question is required.\n\n**`requiredErrorText`** : _str | None_<br>\nError text if the required condition is not met.\n\n**`requiredIf`** : _str | None_<br>\nExpression to make the question required.\n\n**`resetValueIf`** : _str | None_<br>\nExpression to reset the value of the question.\n\n**`rows`** : _int_<br>\nHeight of the input field in rows' number.\n\n**`setValueExpression`** : _str | None_<br>\nExpression to decide on the value of the question to be set. Requires `setValueIf`.\n\n**`setValueIf`** : _str | None_<br>\nExpression with a condition to set the value of the question. Requires `setValueExpression`.\n\n**`showCommentArea`** : _bool_<br>\nWhether to show the comment area. Doesn't work with `showOtherItem`.\n\n**`showOtherItem`** : _bool_<br>\nWhether to show the 'Other' item. Doesn't work with `showCommentArea`.\n\n**`startWithNewLine`** : _bool_<br>\nWhether to start the question on a new line.\n\n**`state`** : _str | None_<br>\nIf the question should be collapsed or expanded. Can be 'default', 'collapsed', 'expanded'.\n\n**`titleLocation`** : _str_<br>\nThe location of the title. Can be 'default', 'top', 'bottom', 'left', 'hidden'.\n\n**`useDisplayValuesInDynamicTexts`** : _bool_<br>\nWhether to use display names for question values in placeholders.\n\n**`validators`** : _ValidatorModel | list[ValidatorModel] | None_<br>\nValidator(s) for the question.\n\n**`visible`** : _bool_<br>\nWhether the question is visible.\n\n**`visibleIf`** : _str | None_<br>\nExpression to make the question visible.\n\n**`width`** : _str_<br>\nWidth of the question in CSS units.\n\n**`addCode`** : _dict | None_<br>\nAdditional code for the question. Usually not necessary.\n\n**`customCode`** : _str | None_<br>\nCustom JS commands to be added to the survey.\n\n**`customFunctions`** : _str | None_<br>\nCustom JS functions definitions to be added to the survey. To be used with `customCode`.\n\n# `rating()`\n\nCreate a rating question object.\n\n![The rating question example](./figs/question_types/rating.png)\n\n## Signature\n\n::: {#d80ba0b2 .cell execution_count=11}\n``` {.python .cell-code}\nrating(\n    name: str,\n    *title: str | list[str] | None,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    maxRateDescription: str | None = None,\n    minRateDescription: str | None = None,\n    rateMax: int = 5,\n    rateMin: int = 1,\n    rateStep: int = 1,\n    rateType: str = 'labels',\n    rateValues: list | None = None,\n    scaleColorMode: str = 'monochrome',\n    **kwargs\n) -> QuestionRatingModel | list[QuestionRatingModel]\n```\n:::\n\n\n## Arguments\n\n**`title`** : _str | None_<br>\nThe visible title of the question. If None, `name` is used.\n\n**`commentPlaceholder`** : _str | None_<br>\nPlaceholder text for the comment area.\n\n**`commentText`** : _str | None_<br>\nText for the comment area.\n\n**`correctAnswer`** : _str | None_<br>\nCorrect answer for the question. Use for quizzes.\n\n**`defaultValue`** : _str | None_<br>\nDefault value for the question.\n\n**`defaultValueExpression`** : _str | None_<br>\nExpression deciding the default value for the question.\n\n**`description`** : _str | None_<br>\nOptional subtitle or description of the question.\n\n**`descriptionLocation`** : _str_<br>\nThe location of the description. Can be 'default', 'underTitle', 'underInput'.\n\n**`enableIf`** : _str | None_<br>\nExpression to enable the question.\n\n**`errorLocation`** : _str | None_<br>\nLocation of the error text. Can be 'default' 'top', 'bottom'.\n\n**`hideNumber`** : _bool_<br>\nWhether to hide the question number.\n\n**`id`** : _str | None_<br>\nHTML id attribute for the question. Usually not necessary.\n\n**`maxRateDescription`** : _str | None_<br>\nDescription for the biggest rate.\n\n**`maxWidth`** : _str_<br>\nMaximum width of the question in CSS units.\n\n**`minRateDescription`** : _str | None_<br>\nDescription for the smallest rate.\n\n**`minWidth`** : _str_<br>\nMinimum width of the question in CSS units.\n\n**`rateMax`** : _int_<br>\nMaximum rate. Works only if `rateValues` is not set.\n\n**`rateMin`** : _int_<br>\nMinimum rate. Works only if `rateValues` is not set.\n\n**`rateStep`** : _int_<br>\nStep for the rate. Works only if `rateValues` is not set.\n\n**`rateType`** : _str_<br>\nThe type of the rate. Can be 'labels', 'stars', 'smileys'.\n\n**`rateValues`** : _list | None_<br>\nManually set rate values. Use a list of primitives and/or dictionaries `{\"value\": ..., \"text\": ...}`.\n\n**`readOnly`** : _bool_<br>\nWhether the question is read-only.\n\n**`isRequired`** : _bool_<br>\nWhether the question is required.\n\n**`requiredErrorText`** : _str | None_<br>\nError text if the required condition is not met.\n\n**`requiredIf`** : _str | None_<br>\nExpression to make the question required.\n\n**`resetValueIf`** : _str | None_<br>\nExpression to reset the value of the question.\n\n**`scaleColorMode`** : _str_<br>\nThe color mode of the scale if `rateType='smileys'`. Can be 'monochrome', 'colored'.\n\n**`setValueExpression`** : _str | None_<br>\nExpression to decide on the value of the question to be set. Requires `setValueIf`.\n\n**`setValueIf`** : _str | None_<br>\nExpression with a condition to set the value of the question. Requires `setValueExpression`.\n\n**`showCommentArea`** : _bool_<br>\nWhether to show the comment area. Doesn't work with `showOtherItem`.\n\n**`showOtherItem`** : _bool_<br>\nWhether to show the 'Other' item. Doesn't work with `showCommentArea`.\n\n**`startWithNewLine`** : _bool_<br>\nWhether to start the question on a new line.\n\n**`state`** : _str | None_<br>\nIf the question should be collapsed or expanded. Can be 'default', 'collapsed', 'expanded'.\n\n**`titleLocation`** : _str_<br>\nThe location of the title. Can be 'default', 'top', 'bottom', 'left', 'hidden'.\n\n**`useDisplayValuesInDynamicTexts`** : _bool_<br>\nWhether to use display names for question values in placeholders.\n\n**`validators`** : _ValidatorModel | list[ValidatorModel] | None_<br>\nValidator(s) for the question.\n\n**`visible`** : _bool_<br>\nWhether the question is visible.\n\n**`visibleIf`** : _str | None_<br>\nExpression to make the question visible.\n\n**`width`** : _str_<br>\nWidth of the question in CSS units.\n\n**`addCode`** : _dict | None_<br>\nAdditional code for the question. Usually not necessary.\n\n**`customCode`** : _str | None_<br>\nCustom JS commands to be added to the survey.\n\n**`customFunctions`** : _str | None_<br>\nCustom JS functions definitions to be added to the survey. To be used with `customCode`.\n\n# `yesno()`\n\nCreate a yes/no (boolean) question object.\n\n![The yesno question example](./figs/question_types/yesno.png)\n\n## Signature\n\n::: {#279c2517 .cell execution_count=12}\n``` {.python .cell-code}\nyesno(\n    name: str,\n    *title: str | list[str] | None,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    labelFalse: str | None = None,\n    labelTrue: str | None = None,\n    swapOrder: bool = False,\n    valueFalse: bool | str = False,\n    valueTrue: bool | str = True,\n    **kwargs\n) -> QuestionBooleanModel | list[QuestionBooleanModel]\n```\n:::\n\n\n## Arguments\n\n**`title`** : _str | None_<br>\nThe visible title of the question. If None, `name` is used.\n\n**`commentPlaceholder`** : _str | None_<br>\nPlaceholder text for the comment area.\n\n**`commentText`** : _str | None_<br>\nText for the comment area.\n\n**`correctAnswer`** : _str | None_<br>\nCorrect answer for the question. Use for quizzes.\n\n**`defaultValue`** : _str | None_<br>\nDefault value for the question.\n\n**`defaultValueExpression`** : _str | None_<br>\nExpression deciding the default value for the question.\n\n**`description`** : _str | None_<br>\nOptional subtitle or description of the question.\n\n**`descriptionLocation`** : _str_<br>\nThe location of the description. Can be 'default', 'underTitle', 'underInput'.\n\n**`enableIf`** : _str | None_<br>\nExpression to enable the question.\n\n**`errorLocation`** : _str | None_<br>\nLocation of the error text. Can be 'default' 'top', 'bottom'.\n\n**`hideNumber`** : _bool_<br>\nWhether to hide the question number.\n\n**`id`** : _str | None_<br>\nHTML id attribute for the question. Usually not necessary.\n\n**`labelFalse`** : _str | None_<br>\nLabel for the 'false' value.\n\n**`labelTrue`** : _str | None_<br>\nLabel for the 'true' value.\n\n**`maxWidth`** : _str_<br>\nMaximum width of the question in CSS units.\n\n**`minWidth`** : _str_<br>\nMinimum width of the question in CSS units.\n\n**`readOnly`** : _bool_<br>\nWhether the question is read-only.\n\n**`isRequired`** : _bool_<br>\nWhether the question is required.\n\n**`requiredErrorText`** : _str | None_<br>\nError text if the required condition is not met.\n\n**`requiredIf`** : _str | None_<br>\nExpression to make the question required.\n\n**`resetValueIf`** : _str | None_<br>\nExpression to reset the value of the question.\n\n**`setValueExpression`** : _str | None_<br>\nExpression to decide on the value of the question to be set. Requires `setValueIf`.\n\n**`setValueIf`** : _str | None_<br>\nExpression with a condition to set the value of the question. Requires `setValueExpression`.\n\n**`showCommentArea`** : _bool_<br>\nWhether to show the comment area. Doesn't work with `showOtherItem`.\n\n**`showOtherItem`** : _bool_<br>\nWhether to show the 'Other' item. Doesn't work with `showCommentArea`.\n\n**`startWithNewLine`** : _bool_<br>\nWhether to start the question on a new line.\n\n**`state`** : _str | None_<br>\nIf the question should be collapsed or expanded. Can be 'default', 'collapsed', 'expanded'.\n\n**`swapOrder`** : _bool_<br>\nWhether to swap the default (no, yes) order of the labels.\n\n**`titleLocation`** : _str_<br>\nThe location of the title. Can be 'default', 'top', 'bottom', 'left', 'hidden'.\n\n**`useDisplayValuesInDynamicTexts`** : _bool_<br>\nWhether to use display names for question values in placeholders.\n\n**`validators`** : _ValidatorModel | list[ValidatorModel] | None_<br>\nValidator(s) for the question.\n\n**`valueFalse`** : _str_<br>\nValue for the 'false' option.\n\n**`valueTrue`** : _str_<br>\nValue for the 'true' option.\n\n**`visible`** : _bool_<br>\nWhether the question is visible.\n\n**`visibleIf`** : _str | None_<br>\nExpression to make the question visible.\n\n**`width`** : _str_<br>\nWidth of the question in CSS units.\n\n**`addCode`** : _dict | None_<br>\nAdditional code for the question. Usually not necessary.\n\n**`customCode`** : _str | None_<br>\nCustom JS commands to be added to the survey.\n\n**`customFunctions`** : _str | None_<br>\nCustom JS functions definitions to be added to the survey. To be used with `customCode`.\n\n# `info()`\n\nCreate an informational text object.\n\n![The info question example](./figs/question_types/info.png)\n\n## Signature\n\n::: {#1ec8aabb .cell execution_count=13}\n``` {.python .cell-code}\ninfo(\n    name: str,\n    *infoHTML: str | list[str],\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    **kwargs\n) -> QuestionHtmlModel | list[QuestionHtmlModel]\n```\n:::\n\n\n## Arguments\n\n**`infoHTML`** : _str_<br>\nThe HTML content of the infobox.\n\n**`commentPlaceholder`** : _str | None_<br>\nPlaceholder text for the comment area.\n\n**`commentText`** : _str | None_<br>\nText for the comment area.\n\n**`correctAnswer`** : _str | None_<br>\nCorrect answer for the question. Use for quizzes.\n\n**`defaultValue`** : _str | None_<br>\nDefault value for the question.\n\n**`defaultValueExpression`** : _str | None_<br>\nExpression deciding the default value for the question.\n\n**`description`** : _str | None_<br>\nOptional subtitle or description of the question.\n\n**`descriptionLocation`** : _str_<br>\nThe location of the description. Can be 'default', 'underTitle', 'underInput'.\n\n**`enableIf`** : _str | None_<br>\nExpression to enable the question.\n\n**`errorLocation`** : _str | None_<br>\nLocation of the error text. Can be 'default' 'top', 'bottom'.\n\n**`hideNumber`** : _bool_<br>\nWhether to hide the question number.\n\n**`id`** : _str | None_<br>\nHTML id attribute for the question. Usually not necessary.\n\n**`maxWidth`** : _str_<br>\nMaximum width of the question in CSS units.\n\n**`minWidth`** : _str_<br>\nMinimum width of the question in CSS units.\n\n**`readOnly`** : _bool_<br>\nWhether the question is read-only.\n\n**`isRequired`** : _bool_<br>\nWhether the question is required.\n\n**`requiredErrorText`** : _str | None_<br>\nError text if the required condition is not met.\n\n**`requiredIf`** : _str | None_<br>\nExpression to make the question required.\n\n**`resetValueIf`** : _str | None_<br>\nExpression to reset the value of the question.\n\n**`setValueExpression`** : _str | None_<br>\nExpression to decide on the value of the question to be set. Requires `setValueIf`.\n\n**`setValueIf`** : _str | None_<br>\nExpression with a condition to set the value of the question. Requires `setValueExpression`.\n\n**`showCommentArea`** : _bool_<br>\nWhether to show the comment area. Doesn't work with `showOtherItem`.\n\n**`showOtherItem`** : _bool_<br>\nWhether to show the 'Other' item. Doesn't work with `showCommentArea`.\n\n**`startWithNewLine`** : _bool_<br>\nWhether to start the question on a new line.\n\n**`state`** : _str | None_<br>\nIf the question should be collapsed or expanded. Can be 'default', 'collapsed', 'expanded'.\n\n**`title`** : _str | None_<br>\nThe visible title of the question. If None, `name` is used.\n\n**`titleLocation`** : _str_<br>\nThe location of the title. Can be 'default', 'top', 'bottom', 'left', 'hidden'.\n\n**`useDisplayValuesInDynamicTexts`** : _bool_<br>\nWhether to use display names for question values in placeholders.\n\n**`validators`** : _ValidatorModel | list[ValidatorModel] | None_<br>\nValidator(s) for the question.\n\n**`visible`** : _bool_<br>\nWhether the question is visible.\n\n**`visibleIf`** : _str | None_<br>\nExpression to make the question visible.\n\n**`width`** : _str_<br>\nWidth of the question in CSS units.\n\n**`addCode`** : _dict | None_<br>\nAdditional code for the question. Usually not necessary.\n\n**`customCode`** : _str | None_<br>\nCustom JS commands to be added to the survey.\n\n**`customFunctions`** : _str | None_<br>\nCustom JS functions definitions to be added to the survey. To be used with `customCode`.\n\n# `matrix()`\n\nCreate a matrix question object.\n\n![The matrix question example](./figs/question_types/matrix.png)\n\n## Signature\n\n::: {#3040d5fb .cell execution_count=14}\n``` {.python .cell-code}\nmatrix(\n    name: str,\n    title: str | list[str] | None,\n    *columns,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    rows: list | dict | None = None,\n    alternateRows: bool | None = None,\n    columnMinWidth: str | None = None,\n    displayMode: str = 'auto',\n    rowTitleWidth: str | None = None,\n    showHeader: bool = True,\n    verticalAlign: str = 'middle',\n    eachRowUnique: bool | None = None,\n    hideIfRowsEmpty: bool | None = None,\n    isAllRowRequired: bool = False,\n    rowsOrder: str = 'initial',\n    **kwargs\n) -> QuestionMatrixModel | list[QuestionMatrixModel]\n```\n:::\n\n\n## Arguments\n\n**`title`** : _str | None_<br>\nThe visible title of the question. If None, `name` is used.\n\n**`columns`** : _list | dict_<br>\nThe columns of the matrix. Use primitives or dictionaries `{\"text\": ..., \"value\": ..., \"type\": ..., \"otherParameter\": ...}`.\n\n**`rows`** : _list | dict_<br>\nThe rows of the matrix. Use primitives or dictionaries `{\"text\": ..., \"value\": ..., \"otherParameter\": ...}`.\n\n**`alternateRows`** : _bool | None_<br>\nWhether to alternate the rows.\n\n**`columnMinWidth`** : _str | None_<br>\nMinimum width of the column in CSS units.\n\n**`commentPlaceholder`** : _str | None_<br>\nPlaceholder text for the comment area.\n\n**`commentText`** : _str | None_<br>\nText for the comment area.\n\n**`correctAnswer`** : _str | None_<br>\nCorrect answer for the question. Use for quizzes.\n\n**`defaultValue`** : _str | None_<br>\nDefault value for the question.\n\n**`defaultValueExpression`** : _str | None_<br>\nExpression deciding the default value for the question.\n\n**`description`** : _str | None_<br>\nOptional subtitle or description of the question.\n\n**`descriptionLocation`** : _str_<br>\nThe location of the description. Can be 'default', 'underTitle', 'underInput'.\n\n**`displayMode`** : _str_<br>\nThe display mode of the matrix. Can be 'auto', 'list', 'table'.\n\n**`eachRowUnique`** : _bool | None_<br>\nWhether each row should have a unique answer. Defaults to False.\n\n**`enableIf`** : _str | None_<br>\nExpression to enable the question.\n\n**`errorLocation`** : _str | None_<br>\nLocation of the error text. Can be 'default' 'top', 'bottom'.\n\n**`hideIfRowsEmpty`** : _bool | None_<br>\nWhether to hide the question if no rows are visible.\n\n**`hideNumber`** : _bool_<br>\nWhether to hide the question number.\n\n**`id`** : _str | None_<br>\nHTML id attribute for the question. Usually not necessary.\n\n**`isAllRowRequired`** : _bool_<br>\nWhether each and every row is to be required.\n\n**`maxWidth`** : _str_<br>\nMaximum width of the question in CSS units.\n\n**`minWidth`** : _str_<br>\nMinimum width of the question in CSS units.\n\n**`readOnly`** : _bool_<br>\nWhether the question is read-only.\n\n**`isRequired`** : _bool_<br>\nWhether the question is required.\n\n**`requiredErrorText`** : _str | None_<br>\nError text if the required condition is not met.\n\n**`requiredIf`** : _str | None_<br>\nExpression to make the question required.\n\n**`resetValueIf`** : _str | None_<br>\nExpression to reset the value of the question.\n\n**`rowTitleWidth`** : _str | None_<br>\nWidth of the row title in CSS units.\n\n**`rowsOrder`** : _str_<br>\nThe order of the rows. Can be 'initial', 'random'.\n\n**`setValueExpression`** : _str | None_<br>\nExpression to decide on the value of the question to be set. Requires `setValueIf`.\n\n**`setValueIf`** : _str | None_<br>\nExpression with a condition to set the value of the question. Requires `setValueExpression`.\n\n**`showCommentArea`** : _bool_<br>\nWhether to show the comment area. Doesn't work with `showOtherItem`.\n\n**`showHeader`** : _bool_<br>\nWhether to show the header of the table.\n\n**`showOtherItem`** : _bool_<br>\nWhether to show the 'Other' item. Doesn't work with `showCommentArea`.\n\n**`startWithNewLine`** : _bool_<br>\nWhether to start the question on a new line.\n\n**`state`** : _str | None_<br>\nIf the question should be collapsed or expanded. Can be 'default', 'collapsed', 'expanded'.\n\n**`titleLocation`** : _str_<br>\nThe location of the title. Can be 'default', 'top', 'bottom', 'left', 'hidden'.\n\n**`useDisplayValuesInDynamicTexts`** : _bool_<br>\nWhether to use display names for question values in placeholders.\n\n**`validators`** : _ValidatorModel | list[ValidatorModel] | None_<br>\nValidator(s) for the question.\n\n**`verticalAlign`** : _str_<br>\nThe vertical alignment of the content. Can be 'top', 'middle'.\n\n**`visible`** : _bool_<br>\nWhether the question is visible.\n\n**`visibleIf`** : _str | None_<br>\nExpression to make the question visible.\n\n**`width`** : _str_<br>\nWidth of the question in CSS units.\n\n**`addCode`** : _dict | None_<br>\nAdditional code for the question. Usually not necessary.\n\n**`customCode`** : _str | None_<br>\nCustom JS commands to be added to the survey.\n\n**`customFunctions`** : _str | None_<br>\nCustom JS functions definitions to be added to the survey. To be used with `customCode`.\n\n# `matrixDynamic()`\n\nCreate a dynamic matrix question object.\n\n![The matrixDynamic question example](./figs/question_types/matrixDynamic.png)\n\n## Signature\n\n::: {#830343d1 .cell execution_count=15}\n``` {.python .cell-code}\nmatrixDynamic(\n    name: str,\n    title: str | list[str] | None,\n    *columns,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    rows: list | dict | None = None,\n    alternateRows: bool | None = None,\n    columnMinWidth: str | None = None,\n    displayMode: str = 'auto',\n    rowTitleWidth: str | None = None,\n    showHeader: bool = True,\n    verticalAlign: str = 'middle',\n    cellErrorLocation: str = 'default',\n    cellType: str | None = None,\n    isUniqueCaseSensitive: bool = False,\n    placeHolder: str | None = None,\n    transposeData: bool = False,\n    addRowLocation: str = 'default',\n    addRowText: str | None = None,\n    allowAddRows: bool = True,\n    allowRemoveRows: bool = True,\n    allowRowsDragAndDrop: bool = False,\n    confirmDelete: bool = False,\n    confirmDeleteText: str | None = None,\n    defaultRowValue: str | None = None,\n    defaultValueFromLastRow: bool = False,\n    emptyRowsText: str | None = None,\n    hideColumnsIfEmpty: bool = False,\n    maxRowCount: int = 1000,\n    minRowCount: int = 0,\n    removeRowText: str | None = None,\n    rowCount: int = 2,\n    **kwargs\n) -> QuestionMatrixDynamicModel | list[QuestionMatrixDynamicModel]\n```\n:::\n\n\n## Arguments\n\n**`title`** : _str | None_<br>\nThe visible title of the question. If None, `name` is used.\n\n**`columns`** : _list | dict_<br>\nThe columns of the matrix. Use primitives or dictionaries `{\"text\": ..., \"value\": ..., \"type\": ..., \"otherParameter\": ...}`.\n\n**`rows`** : _list | dict_<br>\nThe rows of the matrix. Use primitives or dictionaries `{\"text\": ..., \"value\": ..., \"otherParameter\": ...}`.\n\n**`addRowLocation`** : _str_<br>\nThe location of the 'Add row' button. Can be 'default', 'top', 'bottom', 'topBottom' (both top and bottom).\n\n**`addRowText`** : _str | None_<br>\nText for the 'Add row' button.\n\n**`allowAddRows`** : _bool_<br>\nWhether to allow adding rows.\n\n**`allowRemoveRows`** : _bool_<br>\nWhether to allow removing rows.\n\n**`allowRowsDragAndDrop`** : _bool_<br>\nWhether to allow dragging and dropping rows to change order.\n\n**`alternateRows`** : _bool | None_<br>\nWhether to alternate the rows.\n\n**`cellErrorLocation`** : _str_<br>\nThe location of the error text for the cells. Can be 'default', 'top', 'bottom'.\n\n**`cellType`** : _str | None_<br>\nThe type of the matrix cells. Can be overridden for individual columns. Can be \"dropdown\" (default), \"checkbox\", \"radiogroup\", \"tagbox\", \"text\", \"comment\", \"boolean\", \"expression\", \"rating\".\n\n**`choices`** : _str | dict | list_<br>\nThe default choices for all select questions. Can be overridden for individual columns. Can be string(s) or dictionary(-ies) with structure `{\"value\": ..., \"text\": ..., \"otherParameter\": ...}`.\n\n**`columnMinWidth`** : _str | None_<br>\nMinimum width of the column in CSS units.\n\n**`columns`** : _list | dict_<br>\nThe columns of the matrix. Use primitives or dictionaries `{\"text\": ..., \"value\": ..., \"type\": ..., \"otherParameter\": ...}`.\n\n**`commentPlaceholder`** : _str | None_<br>\nPlaceholder text for the comment area.\n\n**`commentText`** : _str | None_<br>\nText for the comment area.\n\n**`confirmDelete`** : _bool_<br>\nWhether to prompt for confirmation before deleting a row. Default is False.\n\n**`confirmDeleteText`** : _str | None_<br>\nText for the confirmation dialog when `confirmDelete` is True.\n\n**`correctAnswer`** : _str | None_<br>\nCorrect answer for the question. Use for quizzes.\n\n**`defaultRowValue`** : _str | None_<br>\nDefault value for the new rows that has no `defaultValue` property.\n\n**`defaultValue`** : _str | None_<br>\nDefault value for the question.\n\n**`defaultValueExpression`** : _str | None_<br>\nExpression deciding the default value for the question.\n\n**`defaultValueFromLastRow`** : _bool_<br>\nWhether to copy the value from the last row to the new row.\n\n**`description`** : _str | None_<br>\nOptional subtitle or description of the question.\n\n**`descriptionLocation`** : _str_<br>\nThe location of the description. Can be 'default', 'underTitle', 'underInput'.\n\n**`displayMode`** : _str_<br>\nThe display mode of the matrix. Can be 'auto', 'list', 'table'.\n\n**`emptyRowsText`** : _str | None_<br>\nText to display when there are no rows if `hideColumnsIfEmpty` is True.\n\n**`enableIf`** : _str | None_<br>\nExpression to enable the question.\n\n**`errorLocation`** : _str | None_<br>\nLocation of the error text. Can be 'default' 'top', 'bottom'.\n\n**`hideColumnsIfEmpty`** : _bool_<br>\nWhether to hide columns if there are no rows.\n\n**`hideNumber`** : _bool_<br>\nWhether to hide the question number.\n\n**`id`** : _str | None_<br>\nHTML id attribute for the question. Usually not necessary.\n\n**`isUniqueCaseSensitive`** : _bool_<br>\nWhether the case of the answer should be considered when checking for uniqueness. If `True`, \"Kowalski\" and \"kowalski\" will be considered different answers.\n\n**`maxRowCount`** : _int_<br>\nMaximum number of rows.\n\n**`maxWidth`** : _str_<br>\nMaximum width of the question in CSS units.\n\n**`minRowCount`** : _int_<br>\nMinimum number of rows.\n\n**`minWidth`** : _str_<br>\nMinimum width of the question in CSS units.\n\n**`placeHolder`** : _str | None_<br>\nPlaceholder text for the cells.\n\n**`readOnly`** : _bool_<br>\nWhether the question is read-only.\n\n**`removeRowText`** : _str | None_<br>\nText for the 'Remove row' button.\n\n**`isRequired`** : _bool_<br>\nWhether the question is required.\n\n**`requiredErrorText`** : _str | None_<br>\nError text if the required condition is not met.\n\n**`requiredIf`** : _str | None_<br>\nExpression to make the question required.\n\n**`resetValueIf`** : _str | None_<br>\nExpression to reset the value of the question.\n\n**`rowCount`** : _int_<br>\nThe initial number of rows.\n\n**`rowTitleWidth`** : _str | None_<br>\nWidth of the row title in CSS units.\n\n**`rows`** : _list | dict_<br>\nThe rows of the matrix. Use primitives or dictionaries `{\"text\": ..., \"value\": ...}`.\n\n**`setValueExpression`** : _str | None_<br>\nExpression to decide on the value of the question to be set. Requires `setValueIf`.\n\n**`setValueIf`** : _str | None_<br>\nExpression with a condition to set the value of the question. Requires `setValueExpression`.\n\n**`showCommentArea`** : _bool_<br>\nWhether to show the comment area. Doesn't work with `showOtherItem`.\n\n**`showHeader`** : _bool_<br>\nWhether to show the header of the table.\n\n**`showOtherItem`** : _bool_<br>\nWhether to show the 'Other' item. Doesn't work with `showCommentArea`.\n\n**`startWithNewLine`** : _bool_<br>\nWhether to start the question on a new line.\n\n**`state`** : _str | None_<br>\nIf the question should be collapsed or expanded. Can be 'default', 'collapsed', 'expanded'.\n\n**`titleLocation`** : _str_<br>\nThe location of the title. Can be 'default', 'top', 'bottom', 'left', 'hidden'.\n\n**`transposeData`** : _bool_<br>\nWhether to show columns as rows. Default is False.\n\n**`useDisplayValuesInDynamicTexts`** : _bool_<br>\nWhether to use display names for question values in placeholders.\n\n**`validators`** : _ValidatorModel | list[ValidatorModel] | None_<br>\nValidator(s) for the question.\n\n**`verticalAlign`** : _str_<br>\nThe vertical alignment of the content. Can be 'top', 'middle'.\n\n**`visible`** : _bool_<br>\nWhether the question is visible.\n\n**`visibleIf`** : _str | None_<br>\nExpression to make the question visible.\n\n**`width`** : _str_<br>\nWidth of the question in CSS units.\n\n**`addCode`** : _dict | None_<br>\nAdditional code for the question. Usually not necessary.\n\n**`customCode`** : _str | None_<br>\nCustom JS commands to be added to the survey.\n\n**`customFunctions`** : _str | None_<br>\nCustom JS functions definitions to be added to the survey. To be used with `customCode`.\n\n# `slider()`\n\nCreate a slider question object.\n\n![The slider question example](./figs/question_types/slider.png)\n\n## Signature\n\n::: {#79734ae1 .cell execution_count=16}\n``` {.python .cell-code}\nslider(\n    name: str,\n    *title: str | list[str] | None,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    step: int = 1,\n    rangeMin: int = 0,\n    rangeMax: int = 100,\n    pipsMode: str = 'positions',\n    pipsValues: list = [0,\n    25,\n    50,\n    75,\n    100],\n    pipsText: list = [0,\n    25,\n    50,\n    75,\n    100],\n    pipsDensity: int = 5,\n    orientation: str = 'horizontal',\n    direction: str = 'ltr',\n    tooltips: bool = True,\n    **kwargs\n) -> QuestionNoUiSliderModel | list[QuestionNoUiSliderModel]\n```\n:::\n\n\n## Arguments\n\n**`title`** : _str | None_<br>\nThe visible title of the question. If None, `name` is used.\n\n**`step`** : _int_<br>\nThe step of the slider.\n\n**`rangeMin`** : _int_<br>\nThe minimum value of the slider.\n\n**`rangeMax`** : _int_<br>\nThe maximum value of the slider.\n\n**`pipsMode`** : _str_<br>\nThe mode of the pips. Can be 'positions', 'values', 'count', 'range', 'steps'. See <https://refreshless.com/nouislider/pips/>\n\n**`pipsValues`** : _list_<br>\nThe values of the pips.\n\n**`pipsText`** : _list_<br>\nThe text of the pips.\n\n**`pipsDensity`** : _int_<br>\nThe density of the pips.\n\n**`orientation`** : _str_<br>\nThe orientation of the slider. Can be 'horizontal', 'vertical'.\n\n**`direction`** : _str_<br>\nThe direction of the slider. Can be 'ltr', 'rtl'.\n\n**`tooltips`** : _bool_<br>\nWhether to show tooltips.\n\n**`addCode`** : _dict | None_<br>\nAdditional code for the question. Usually not necessary.\n\n**`customCode`** : _str | None_<br>\nCustom JS commands to be added to the survey.\n\n**`customFunctions`** : _str | None_<br>\nCustom JS functions definitions to be added to the survey. To be used with `customCode`.\n\n# `image()`\n\nAn image or video question object.\n\n![The image question example](./figs/question_types/image.png)\n\n## Signature\n\n::: {#732bc37e .cell execution_count=17}\n``` {.python .cell-code}\nimage(\n    name: str,\n    *imageLink: str,\n    titleLocation: str = 'default',\n    description: str | None = None,\n    descriptionLocation: str = 'default',\n    isRequired: bool = False,\n    readOnly: bool = False,\n    visible: bool = True,\n    requiredIf: str | None = None,\n    enableIf: str | None = None,\n    visibleIf: str | None = None,\n    validators: velesresearch.helperModels.ValidatorModel | list[velesresearch.helperModels.ValidatorModel] | None = None,\n    showOtherItem: bool = False,\n    showCommentArea: bool = False,\n    commentPlaceholder: str | None = None,\n    commentText: str | None = None,\n    correctAnswer: str | None = None,\n    defaultValue: str | None = None,\n    defaultValueExpression: str | None = None,\n    requiredErrorText: str | None = None,\n    errorLocation: str = 'default',\n    hideNumber: bool = False,\n    id: str | None = None,\n    maxWidth: str = '100%',\n    minWidth: str = '300px',\n    resetValueIf: str | None = None,\n    setValueIf: str | None = None,\n    setValueExpression: str | None = None,\n    startWithNewLine: bool = True,\n    state: str = 'default',\n    useDisplayValuesInDynamicTexts: bool = True,\n    width: str = '',\n    addCode: dict | None = None,\n    altText: str | None = None,\n    contentMode: str = 'auto',\n    imageFit: str = 'contain',\n    imageHeight: int | str = 150,\n    imageWidth: int | str = 200,\n    **kwargs\n) -> QuestionImageModel | list[QuestionImageModel]\n```\n:::\n\n\n## Arguments\n\n**`imageLink`** : _str | None_<br>\nThe src property for <img> or video link.\n\n**`altText`** : _str | None_<br>\nThe alt property for <img>.\n\n**`commentPlaceholder`** : _str | None_<br>\nPlaceholder text for the comment area.\n\n**`commentText`** : _str | None_<br>\nText for the comment area.\n\n**`contentMode`** : _str_<br>\nThe content type. Can be 'auto' (default), 'image', 'video', 'youtube'.\n\n**`correctAnswer`** : _str | None_<br>\nCorrect answer for the question. Use for quizzes.\n\n**`defaultValue`** : _str | None_<br>\nDefault value for the question.\n\n**`defaultValueExpression`** : _str | None_<br>\nExpression deciding the default value for the question.\n\n**`description`** : _str | None_<br>\nOptional subtitle or description of the question.\n\n**`descriptionLocation`** : _str_<br>\nThe location of the description. Can be 'default', 'underTitle', 'underInput'.\n\n**`enableIf`** : _str | None_<br>\nExpression to enable the question.\n\n**`errorLocation`** : _str | None_<br>\nLocation of the error text. Can be 'default' 'top', 'bottom'.\n\n**`hideNumber`** : _bool_<br>\nWhether to hide the question number.\n\n**`id`** : _str | None_<br>\nHTML id attribute for the question. Usually not necessary.\n\n**`imageFit`** : _str_<br>\nThe object-fit property of <img>. Can be 'contain', 'cover', 'fill', 'none'. See MDN <https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit>.\n\n**`imageHeight`** : _int | str_<br>\nThe height of the image container in CSS units. See `imageFit`.\n\n**`imageWidth`** : _int | str_<br>\nThe width of the image container in CSS units. See `imageFit`.\n\n**`isRequired`** : _bool_<br>\nWhether the question is required.\n\n**`maxWidth`** : _str_<br>\nMaximum width of the question in CSS units.\n\n**`minWidth`** : _str_<br>\nMinimum width of the question in CSS units.\n\n**`readOnly`** : _bool_<br>\nWhether the question is read-only.\n\n**`requiredErrorText`** : _str | None_<br>\nError text if the required condition is not met.\n\n**`requiredIf`** : _str | None_<br>\nExpression to make the question required.\n\n**`resetValueIf`** : _str | None_<br>\nExpression to reset the value of the question.\n\n**`setValueExpression`** : _str | None_<br>\nExpression to decide on the value of the question to be set. Requires `setValueIf`.\n\n**`setValueIf`** : _str | None_<br>\nExpression with a condition to set the value of the question. Requires `setValueExpression`.\n\n**`showCommentArea`** : _bool_<br>\nWhether to show the comment area. Doesn't work with `showOtherItem`.\n\n**`showOtherItem`** : _bool_<br>\nWhether to show the 'Other' item. Doesn't work with `showCommentArea`.\n\n**`startWithNewLine`** : _bool_<br>\nWhether to start the question on a new line.\n\n**`state`** : _str | None_<br>\nIf the question should be collapsed or expanded. Can be 'default', 'collapsed', 'expanded'.\n\n**`title`** : _str | None_<br>\nThe visible title of the question. If None, `name` is used.\n\n**`titleLocation`** : _str_<br>\nThe location of the title. Can be 'default', 'top', 'bottom', 'left', 'hidden'.\n\n**`useDisplayValuesInDynamicTexts`** : _bool_<br>\nWhether to use display names for question values in placeholders.\n\n**`validators`** : _ValidatorModel | list[ValidatorModel] | None_<br>\nValidator(s) for the question.\n\n**`visible`** : _bool_<br>\nWhether the question is visible.\n\n**`visibleIf`** : _str | None_<br>\nExpression to make the question visible.\n\n**`width`** : _str_<br>\nWidth of the question in CSS units.\n\n**`addCode`** : _dict | None_<br>\nAdditional code for the question. Usually not necessary.\n\n**`customCode`** : _str | None_<br>\nCustom JS commands to be added to the survey.\n\n**`customFunctions`** : _str | None_<br>\nCustom JS functions definitions to be added to the survey. To be used with `customCode`.\n\n# `consent()`\n\nCreate a question with a consent to take part in the study.\n\n![The consent question example](./figs/question_types/consent.png)\n\n## Signature\n\n::: {#954cd144 .cell execution_count=18}\n``` {.python .cell-code}\nconsent(\n    title: str = 'Do you consent to take part in the study?',\n    error: str = \"You can't continue without a consent\",\n    mode: str = 'forbid',\n    name: str = 'consent',\n    **kwargs\n) -> QuestionBooleanModel\n```\n:::\n\n\n## Arguments\n\n**`error`** : _str_<br>\nError shown if a person doesn't consent.\n\n**`mode`** : _str_<br>\nWhat to do if a person doesn't consent. Can be 'forbid' (default, doesn't allow to continue) or 'end' (redirects to the end). For 'end' to work, set `triggers` in the `survey()` call to `[{\"type\": \"complete\", \"expression\": \"{consent} = false\"}]`. You can also set `completedHtmlOnCondition` in the `survey()` call to `[{\"expression\": \"{consent} = false\", \"html\": \"You can't continue without a consent\"}]`\n\n**`to`** show a custom message in that case.\n\n**`name`** : _str_<br>\nThe label of the question. Defaults to \"consent\".\n\n**`kwargs`**: Other arguments passed to `yesno()`.\n\n",
    "supporting": [
      "wrappers_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}