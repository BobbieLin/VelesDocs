{
  "hash": "79deaa74ca88a52a14335732bd0370c5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Validators\ntoc: true\ntoc-depth: 1\n---\n\n\n\n\n# `textValidator()`\n\nA validator for text values.\n\n## Signature\n\n::: {#743bf4af .cell execution_count=1}\n``` {.python .cell-code}\ntextValidator(\n    minLength: int = None,\n    maxLength: int = None,\n    allowDigits: bool = True,\n    error: str = None\n) -> ValidatorModel\n```\n:::\n\n\n## Arguments\n\n**`maxLength`** : _int_<br>\nMaximum length for the text validator.\n\n**`allowDigits`** : _bool_<br>\nWhether to allow digits for the text validator. Default is True.\n\n**`error`** : _str_<br>\nCustom error text to display. Optional.\n\n# `emailValidator()`\n\nA validator for email values.\n\n## Signature\n\n::: {#ba1684ee .cell execution_count=2}\n``` {.python .cell-code}\nemailValidator(\n    error: str = None\n) -> ValidatorModel\n```\n:::\n\n\n## Arguments\n\n# `regexValidator()`\n\nA regex based validator.\n\n## Signature\n\n::: {#b63afab6 .cell execution_count=3}\n``` {.python .cell-code}\nregexValidator(\n    regex: str = None,\n    error: str = None\n) -> ValidatorModel\n```\n:::\n\n\n## Arguments\n\n**`error`** : _str_<br>\nCustom error text to display. Optional\n\n# `expressionValidator()`\n\nAn expression based validator.\n\n## Signature\n\n::: {#09545d81 .cell execution_count=4}\n``` {.python .cell-code}\nexpressionValidator(\n    expression: str = None,\n    error: str = None\n) -> ValidatorModel\n```\n:::\n\n\n## Arguments\n\n**`error`** : _str_<br>\nCustom error text to display. Optional\n\n# `numberValidator()`\n\nA validator for number values.\n\n## Signature\n\n::: {#c5b16219 .cell execution_count=5}\n``` {.python .cell-code}\nnumberValidator(\n    minValue: int = None,\n    maxValue: int = None,\n    error: str = None\n) -> ValidatorModel\n```\n:::\n\n\n## Arguments\n\n**`maxValue`** : _int_<br>\nMaximum value for the number validator.\n\n**`error`** : _str_<br>\nCustom error text to display. Optional.\n\n# `answerCountValidator()`\n\nA validator for answer count.\n\n## Signature\n\n::: {#78025ebe .cell execution_count=6}\n``` {.python .cell-code}\nanswerCountValidator(\n    minCount: int = None,\n    maxCount: int = None,\n    error: str = None\n) -> ValidatorModel\n```\n:::\n\n\n## Arguments\n\n**`maxCount`** : _int_<br>\nMaximum count for the answer count validator.\n\n**`error`** : _str_<br>\nCustom error text to display. Optional\n\n",
    "supporting": [
      "validators_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}