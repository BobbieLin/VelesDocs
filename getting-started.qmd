---
title: "Getting started"
date-modified: last-modified
date-format: iso
---

# Prerequisites

Veles is a Python library, so before using it, you need to install Python. If you're using Linux or MacOS, you already have Python installed by default. If you use Windows, you can download the installation bundle from [the official website](https://www.python.org/). During installation, check the box saying "Add python.exe to PATH". It will enable you to run Python by writing `python` in the terminal, without the full path to python.exe. After you install Python, **reboot your system**. You can also do it after installing Node.js later.

Next you need an IDE which is a fancy word for programming text editor. You can use any IDE, but I highly recommend [Visual Studio Code](https://code.visualstudio.com/). If you want to use it, it's a good idea to also download [Python Extension Pack](https://marketplace.visualstudio.com/items?itemName=donjayamanne.python-extension-pack), [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) and [Black formatter](https://marketplace.visualstudio.com/items?itemName=ms-python.black-formatter). Then go to your preferences (Ctrl+Shift+P and search for "Open user settings"[^1]), find and check "Format on save" checkbox. It's a quality-of-life option that ensures your code file is always pretty and readable. You can do it from within the program. Alternatively you use RStudio if you want.

[^1]: Searching in English should work despite what language you have set in VS Code.

![Check the "Format on save" option to ensure maximum readability of your code at all times.](figs/getting_started/format_on_save.png){fig-align="center"}

Some really basic knowledge how to use Python is recommended. If you know what's a variable and how to call functions, you're good to go. If you don't know anything about programming, [this 1-hour Python introduction](https://youtu.be/kqtD5dpn9C8) will be more than enough (although I think VSCode is better than PyCharm).

To actually build (or even preview) your survey, you **must have `yarn` installed**. It's a JavaScript package manager and is used to download some dependencies like Survey.js and React. `yarn` is bundled with Node.js. If you're a Windows or MacOS user, you can download it from [the official website](https://nodejs.org/en/download). The "Prebuilt Installer" should be the easiest. You can also use a package manager (see below). If you're a Linux user, chances are you have Node.js already installed. Otherwise you can use one of the following commands:

``` bash
# Ubuntu (and other apt distros)
sudo apt install npm

# Arch
sudo pacman -S npm

# winget
winget install OpenJS.NodeJS.LTS

# Chocolatey
choco install nodejs-lts

# Homebrew
brew install node
```

To check if npm works, open your terminal (PowerShell in Windows), write this command and hit Enter:

``` bash
npm -v
```

The output should be a version number. If you get an error, then there's something wrong. If you're on Windows and you just installed Node.js, **reboot your system** (PATH may need refreshing).

After installing `node.js`, activate `yarn` with this command in the terminal:

``` bash
corepack enable
```

If you get an error about permissions, try opening your terminal as admin (Windows) or use `sudo corepack enable` (Linux and MacOS).

If everything went well, command `yarn -v` should return a version number.

::: light-mode
![`yarn -v` in Linux terminal](figs/getting_started/yarn-v.png){fig-alt="yarn -v in the terminal"}
:::

::: dark-mode
![`yarn -v` in Linux terminal](figs/getting_started/yarn-v_dark.png){fig-alt="yarn -v in the terminal"}
:::

There are a few things that could go wrong here. **On Windows** you will most probably get an error saying `yarn : File C:\Program Files\nodejs\yarn.ps1 cannot be loaded. The file C:\Program Files\nodejs\yarn.ps1 is not digitally signed. You cannot run this script on the current system.`. If so, run the following command and try again:

```{powershell}
Set-ExecutionPolicy Bypass
```

You may also be asked `Corepack is about to download <url>. Do you want to continue? [Y/n]`. If so, just hit enter to choose the default (which is yes, as indicated by the uppercase Y).

If you get any error telling you that some executable cannot be found, **reboot**.

# Create project

Veles project is just a folder with a Python script. Create a folder anywhere and open it using Visual Studio Code (File → Open folder…). From inside VS Code you can create a new file. Call with what you want but give it `.py` extension. In the file, we'll be writing the survey structure.

## Creating a virtual environment

I recommend creating a virtual environment for every project. Virtual environments are a kind of containers with all your Python packages. If you have it, Veles will not update for that project unless you explicitly tell it to. It is important for maintaining the code stability. When you have your `.py` file opened, you should see your Python version number at the bottom of the VS Code window (see figure below). Click it, select "Create Virtual Environment", then "Venv" and select your newest Python version. A new folder called `.venv` should now be visible inside your project folder.

![Creating virtual enviroments is recommended for every project.](figs/getting_started/create_venv.png){fig-align="center"}

## Installing Veles

Now open a new terminal inside VS Code. Click Terminal → New Terminal or use a keyboard shortcut Ctrl+\`. This terminal is opened in your newly created virtual environment. Now we need to install Veles into this virtual environment. To install Veles, write the following command and hit enter.

``` bash
pip install velesresearch
```

You can also choose development version (unstable but with all the newest features) using this command:

``` bash
pip install velesresearch@git+https://github.com/jakub-jedrusiak/VelesResearch.git
```

To install the developer version from GitHub, you will need to actually have git installed. Linux comes with git already installed. Windows and MacOS users can download it from [the official website](https://git-scm.com/downloads) or use an appropriate package manager (i.e. Microsoft Store or App Store).

If everything went well, you shouldn't see any errors.

![An example console output of a successful installation of the `velesresearch` package.](figs/getting_started/installing_veles.png){fig-align="center"}

Now we can start writing our script. In your `.py` file add the following line:

```{python}
import velesresearch as vls
```

It gives you access to all Veles functions when you write `vls.`. If VS Code can't recognise the import, reload the window (Ctrl+Shift+P → Reload Window) or close and reopen VS Code.

# Survey structure

In [SurveyJS](https://surveyjs.io/), which is the base of Veles, surveys consist of pages, panels and questions. We can create them separately and then combine them into a complete survey.

![Survey structure. Source: SurveyJS documentation](https://surveyjs.io/form-library/documentation/images/survey-structure.svg)

Veles is a Python library, so there are many ways to achieve this in practice. We can put things in separate variables and then combine them or nest appropriate functions.

## Questions

In Veles, questions are a class of objects. There are two main ways of creating them -- separately or when we want to convert a whole questionnaire at once. In both cases we use an appropriate question function. See [the docs](ref/wrappers.qmd) for all available question types.

### `radio()`

Let's start with creating some single-choice questions with `vls.radio()`. The syntax is as follows:

```{python}
vls.radio(name, title, *choices, **kwargs)
```

To create a single-choice question we need to invoke the `vls.radio()` function and fill it with appropriate parameters. The first one the `name` argument which is the internal codename of the question that will later **become the name of the column** in the database. The participant will not see this. Then we have the `title` which is the actual text of the question the participant will see. Finally we need to fill in the possible answers. We can separate them with commas. In the end we get:

```{python}
gender = vls.radio(
    "gender",
    "What is your gender?",
    "Woman",
    "Man",
    "Other/I don't want to answer",
)
```

![Gender question example](figs/getting_started/gender_question_example.png)

There are two things to notice here. Firstly, I have saved the created question to a variable called `gender`. We will then use the variable to put the question inside a page. Secondly, all the texts are inside quotation marks. That is required, because otherwise Python will think the words are variables. Don't worry – VS Code will scream at you if you forget the quotation marks.

### Question options

Each question can have a series of additional parameters specified. For example we can make the question required, add a subtitle, add an "Other" option that opens a textbox to specify a custom answer, hide the question number, specify when a question should be visible and so on.

```{python}
gender = vls.radio(
    "gender",
    "What is your gender?",
    "Woman",
    "Man",
    isRequired=True,
    showOtherItem=True,
    showNoneItem=True,
    noneText="Prefer not to say",
    hideNumber=True,
    description="Choose an answer from options below",
)
```

![Gender questions with options specified](figs/getting_started/gender_question_options_example.png)

Every type of question (as well as pages and surveys) has its set of possible options. To check the possible options you can consult [the docs](ref/wrappers.qmd) or (in VS Code with Pylance installed) you can hover your mouse over the name of a function and scroll though the popup.

::: light-mode
![The documentation you can see when you hover over a name of the function in VS Code](figs/getting_started/IDE_docs.png)
:::

::: dark-mode
![The documentation you can see when you hover over a name of the function in VS Code](figs/getting_started/IDE_docs_dark.png)
:::

If you want to have some kind of default set of options (e.g. you want every question to have a hidden number and to be required), create [a dictionary](https://www.w3schools.com/python/python_dictionaries.asp) with curly braces, set all the options there and then pass the dictionary to every question with the [`**` operator](https://www.geeksforgeeks.org/what-does-the-double-star-operator-mean-in-python/#:~:text=As%20arguments%20in%20functions%20and%20methods).

```{python}
defaultOptions = {"hideNumber": True, "isRequired": True}

gender = vls.radio(
    "gender",
    "What is your gender?",
    "Woman",
    "Man",
    "Other/prefer not to answer"
    **defaultOptions
)

age = vls.text(
    "age",
    "What is your age?",
    inputType="number",
    min=18,
    **defaultOptions
)
```

You can use [the pipe `|` operator](https://medium.com/@chinthapooja733/python-tips-merging-dictionaries-using-pipe-operator-98150a4d40ba) to override a some default options for a single question.

```{python}
gender = vls.radio(
    "gender",
    "What is your gender?",
    "Woman",
    "Man",
    "Other/prefer not to answer"
    **defaultOptions | {"isRequired": False}
)
```

### Whole questionnaires

Often in behavioral sciences we want to use a whole questionnaire. It's quite pointless to format every item separately, because they often have the same scale, options and the labels are predictable. Veles allows for including a whole questionnaire at once.

To do this, we need to have the questionnaire in the form of a Python list. We can format it either by hand…

```{python}
# manually formatted list
RSES_items = [
    "I feel that I am a person of worth, at least on an equal plane with others.",
    "I feel that I have a number of good qualities.",
    "All in all, I am inclined to feel that I am a failure.",
    "I am able to do things as well as most other people.",
    "I feel I do not have much to be proud of.",
    "I take a positive attitude toward myself.",
    "On the whole, I am satisfied with myself.",
    "I wish I could have more respect for myself.",
    "I certainly feel useless at times.",
    "At times I think I am no good at all.",
]
```

…or use the power of programming and format it automatically. Here we have the questionnaire in a textual form, where every item is in its own line. In other words, there the items are separated by a line break. We can save the questionnaire in a variable. Notice the triple quotation marks `"""`. They allow us to create a multiline strings.

```{python}
# triple quotation for multi-line strings
RSES_items = """I feel that I am a person of worth, at least on an equal plane with others.
I feel that I have a number of good qualities.
All in all, I am inclined to feel that I am a failure.
I am able to do things as well as most other people.
I feel I do not have much to be proud of.
I take a positive attitude toward myself.
On the whole, I am satisfied with myself.
I wish I could have more respect for myself.
I certainly feel useless at times.
At times I think I am no good at all."""
```

So I saved the questionnaire into a variable called `RSES_items`. I can now tell python to split it, so it would become a list of items. To do this, we can use the `split()` method. Methods are functions that we write after a dot to apply them to something. `split()` takes one argument that is the thing that it needs to split by. In our case it is a line break, in programming denoted with `"\n"`. To split the `RSES_items` string we could write `RSES_items.split("\n")`.

```{python}
RSES = vls.radio(
    "RSES",
    RSES_items.split("\n"),
    "Strongly Agree; Agree; Disagree; Strongly Disagree".split("; "),
    isRequired=True,
)
```

In here I've splitted the inside the `radio()` function, but I also could have done it anywhere before that. To learn more about Python string methods, see [W3Schools lesson](https://www.w3schools.com/python/python_ref_string.asp) about them[^2]. Had I used the manually formatted list, I wouldn't have to write the `split()` part. Also notice what I did with the scale -- we don't *have to* save our texts in variables, we can split them directly inside the question creating function. Just do what seems more readable and straightforward. That is to say, I could have also written something like this:

[^2]: E.g. you can make everything lowercase or get rid of multiple spaces.

```{python}
RSES = vls.radio(
    "RSES",
    """I feel that I am a person of worth, at least on an equal plane with others.
I feel that I have a number of good qualities.
All in all, I am inclined to feel that I am a failure.
I am able to do things as well as most other people.
I feel I do not have much to be proud of.
I take a positive attitude toward myself.
On the whole, I am satisfied with myself.
I wish I could have more respect for myself.
I certainly feel useless at times.
At times I think I am no good at all.""".split(
        "\n"
    ),
    "Strongly Agree; Agree; Disagree; Strongly Disagree".split("; "),
    isRequired=True,
)
```

The labels will become `"RSES_1"`, `"RSES_2"`, `"RSES_3"` etc.

### `info()`

To add an instruction to your questionnaire, use `info()`. The `info()` function gets a name and some html content.

```{python}
vls.page(
    "RSES",
    vls.info(
        "RSES_intro",
        "Please record the appropriate answer for each item, depending on whether you strongly agree, agree, disagree, or strongly disagree with it."
    ),
    RSES # using the RSES variable from earlier
)
```

Use [markdown](https://www.markdownguide.org/basic-syntax/) or [html](https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Fundamentals) to style the text.

```{python}
vls.info(
    "RSES_intro",
    "Please record the appropriate answer <span style='color: #CC0000; font-weight: bold;'>for each item</span>, depending on whether you **strongly agree**, **agree**, **disagree**, or **strongly disagree** with it."
)
```

![Use `vls.info()` with markdown and/or html for instructions.](figs/getting_started/info_styling.png){fig-align="center"}

### List comprehension

This part is not necessary but extremely useful.

The power of Python allows us to bulk modify our questions and answers. This might be the greatest advantage Veles has over its GUI-based[^3] alternatives. Let's imagine we have a list of drinks we want to ask about in our survey. Yet we don't want the question text to be just "Tea" or "Coffee". That would disrespect tea. We need something like "How do you feel about tea?". English being fairly uncomplicated, we just need to put the drink's name into the sentence. We can easily use a loop and an f-string[^4] to do just that.

[^3]: Or WYSIWYG.

[^4]: "String" is a computer lingo for text, a group of letters.

```{python}
# get our drinks and make them a list
drinks = "tea coffee juice water".split(" ")

# modify with a loop
drinks = [f"How do you like {drink}?" for drink in drinks]

# add some answers
answers = "I love it; I like it; It's OK; I don't like it; I despise it".split("; ")

# make it a list of questions
q_drinks = vls.radio("drinks", drinks, answers)
```

There's a few things to unpack here. First we get the list of our drinks separated with some common separator. Put simply, there should be some string (text) separating single drinks -- a space in this example. If we also had `"orange juice"` on the list we would need something else, e.g. a comma followed by a space (`"tea, coffee, juice, water, orange juice"`). We then split it and save it in the `drinks` variable.

The third step may seem more complicated, so let's take it slowly. That is something called *list comprehension*. It's a form of a loop in Python that allows us to quickly do something with a list, e.g. call a function for each element or put every element in a certain string. If you think about our question, it is basically "How do you like {drink}?" where "{drink}" is the name of each drink. That is what we start with. Inside square brackets we write `[f"How do you like {drink}?"]`. Notice I have added `f` before the opening quotation mark. These so called "f-strings" are Python's way of saying that there is a variable in a string. The variable itself must be inside curly brackets.

Now we just need to tell Python to do this for each of our drinks. Python doesn't know what `drink` means if we don't tell it. It is not that smart to infer it from the fact that we called our list `drinks`. To tell Python what we mean by `{drink}`, we need to write `for drink in drinks` so we end up with `[f"How do you like {drink}?" for drink in drinks]`. We could have called it differently. `[f"How do you like {i}?" for i in drinks]` would give the same result, but it makes more sense to call it `drink` rather than `i`, doesn't it? `[f"How do you like {drink}?" for drink in drinks]` basically means "Give me this string `"How do you like {drink}?"` where `drink` means a value from the list called `drinks`. Do this `for` every `drink` `in` the list called `drinks`". We also save the newly created list to the `drinks` variable, overwriting it.

When we run it, the list `['tea', 'coffee', 'juice', 'water']` becomes `['How do you like tea?', 'How do you like coffee?', 'How do you like juice?', 'How do you like water?']`. The new list can be then passed into the `radio()` function. It could've been done manually but learning this technique allows for doing it for arbitrarily long lists.

## Panels

Panels are set of questions that have the same set of options. A common usecase is to set a random order of items without moving the instruction. If you set `questionsOrder="random"` for the whole page, the instruction will also end up in a random spot because it is technically a question. Yet we can put all the questions into a panel and set `questionsOrder` for the panel. Panels are created with `vls.panel()`.

```{python}
vls.page(
    "RSES",
    vls.info(
        "RSES_intro",
        "Please record the appropriate answer for each item, depending on whether you strongly agree, agree, disagree, or strongly disagree with it."
    ),
    vls.panel( 
        RSES # using the RSES variable from earlier
        questionsOrder="random"
    )
)
```

See the docs for options you can set for panels.

## Pages

Every survey needs to have at least one page. Page is basically a list of questions but with its own name, title, description and options. You can create it with `page()`.

```{python}
vls.page(name, questions, **kwargs)
```

Pages have their own names. They don't yet have many uses in directly in Veles but are still mandatory for SurveyJS compatibility reasons. You can also use them when you write custom JS code. Questions can be provided as a list or values separated by commas. Pages also have their own options like title, description or questions order. See [the docs](ref/wrappers.qmd).

```{python}
intro = vls.page("metrics", gender)  # previously created gender question

self_esteem = vls.page(
    "RSES",
    RSES,
    questionsOrder="random",
    title="Rosenberg Self-Esteem Scale",
    maxTimeToFinish=300,  # time limit in seconds
)
```

## Survey

When all elements are created, we can combine them into the final survey. We can do this with the `survey()` function. It does two things -- returns a `Survey` object and creates your survey's structure.

```{python}
vls.survey(pages, **kwargs)
```

```{python}
vls.survey(
    "My smart research",
    intro,
    self_esteem,
    title="Self-esteem and gender",
)
```

By default the page is not built for production, i.e. it is not compiled into a form that can be actually hosted. That is because it takes around a minute and is not needed for testing. When you complete designing your survey, set `buildForProduction` to `True`. Be default, the survey will be created in a subfolder called "survey". To change the folder's name or path, use the `folderName` argument.

```{python}
vls.survey(
    "My smart research",
    intro,
    self_esteem,
    title="Self-esteem and gender",
    buildForProduction=True,
)
```

The structure of the generated files and what to do with them is explained in View and test section [below](#view-and-test).

# Images

There are two main ways to include images in your survey: using the `image()` question type or the `info()` with HTML. You can keep your images either in the main folder or in a subfolder. Let's assume we created a subfolder called images where we keep some jpg files.

![An example file structure](figs/getting_started/images_file_structure.png)

Now we can put both images in our survey. To do that, we will use `convertImage()` to convert the images to [base64](https://en.wikipedia.org/wiki/Base64). It accepts the paths of the files and returns a list of base64 data URI strings. Basically does all the heavy lifting for you.

```{python}
stumuli = vls.page(
    "stimuli",
    vls.image(
        "food_preferences",
        vls.convertImage("images/langouste.jpg", "images/jam.jpg"),
    ),
)
```

You can also bulk convert all the images from the images folder using `glob`.

```{python}
from glob import glob

stumuli = vls.page(
    "stimuli",
    vls.image(
        "food_preferences",
        vls.convertImage(glob("images/*")),
    ),
)
```

See the [`image()` documentation](ref/wrappers.qmd#image) on how to control your output. For example we could do:

```{python}
stumuli = vls.page(
    "stimuli",
    vls.image(
        "food_preferences",
        vls.convertImage("images/langouste.jpg"),
        imageWidth="50%",  # all CSS units are supported
        imageHeight="auto",
    ),
)
```

For more fine-grained control use `info()` with direct HTML and CSS:

```{python}
stumuli = vls.page(
    "stimuli",
    vls.info(
        "stimuli",
        f"""
<div style="display: flex; justify-content: center; gap: 10px;">
  <img src="{vls.convertImage("images/langouste.jpg")}" style="width: 50%; height: auto;">
  <img src="{vls.convertImage("images/jam.jpg")}" style="width: 50%; height: auto;">
</div>
<p style="text-align: center;">Wbrew obiegowej opinii, langusta żywi się wyłącznie owocami morza.<br>Choć gdyby mogła, jadłaby dżem.</p>
""",
    ),
)
```

![You can use HTML and CSS directly (langouste by Michael Wolf on CC BY 2.5, jam by Pixaby on CC0)](figs/getting_started/images_css.png)

Notice that svg files are basically HTML with extra steps. You can open any svg file in a text editor and you will see HTML that you can paste into an `info()` question. You can use [an online service](https://vecta.io/nano) to compress it beforehand.

```{python}
rune = vls.info(
    "veles",
    """<svg xmlns="http://www.w3.org/2000/svg" width="560" height="600" xmlns:v="https://vecta.io/nano"><path d="M279.32 598.941c-.958-1.888-186.52-399.897-186.52-400.064 0-.085 84.24-.154 187.2-.154l187.2.155c0 .302-186.767 400.674-187.031 400.938-.162.162-.5-.186-.849-.874zm43.778-245.228l42.026-90.128-42.464-.075c-23.355-.041-61.661-.041-85.123 0l-42.659.075 42.555 91.257 42.555 91.256.543-1.128 42.569-91.257zM39.022 83.699L2.78 5.982.05.146h35.991 35.991L93.15 45.431l21.118 45.286H280h165.731l21.118-45.286L487.968.146h35.991 35.991l-2.73 5.836-36.243 77.717-33.513 71.881H280 72.536z"/></svg>""", 
)
```

# View and test {#view-and-test}

After writing your survey, you need to create it. Don't worry, it all happens automatically. Just run your script with Python and wait for the website to be built. It might take some time the first time, but after that it will be much faster. How do we run a python script? There are many ways to do this. If you use Visual Studio Code, there's a "Run" button in the upper right corner. Just click it and see if the console prints any errors.

::: light-mode
![](figs/getting_started/run_script.png)
:::

::: dark-mode
![](figs/getting_started/run_script_dark.png)
:::

If everything went well, you should have a folder named "survey". To run your survey, open the folder in a terminal. In VS Code you can use Terminal \> New terminal. Then move to the survey folder with:

```{bash}
cd survey
```

To run your survey, run a second command:

```{bash}
yarn start
```

This runs a local server on your computer. To access your survey, open your favourite browser and type `localhost:3000` in the address bar. The server will work until you turn it off, so if you update your survey, just run the survey script again and the page should automatically refresh. You can now test your survey in your own browser.

If you want to see the data from your tests, open the developer tools of your browser (usually Ctrl+Shift+I) and go to the Network tab. If you have some kind of categories in there, you can select Fetch/XHR. If you click the "Complete" button with this tab opened, you will see a server response called "submit/". When you click it and navigate to the Payload or Request tab, you will see the data you have sent to the server in json format.

![Developer tools in Google Chrome](./figs/getting_started/devtools_chrome.png)

![Developer tools in Mozilla Firefox](./figs/getting_started/devtools_firefox.png)

If you want, you can copy the json object and convert to .csv or .xlsx using [some online service](https://www.convertcsv.com/json-to-csv.htm). If you have multiple answers, enclose them all with square brackets and separate with commas before converting to csv. It should look similar to this:

```{json}
[
   {
      "id": "y71c6K8S",
      "RSES_1": "Strongly Agree",
      "RSES_2": "Agree",
      "group": 1,
      "datestarted": "2024-09-22T19:13:05.116Z",
      "datecompleted": "2024-09-22T19:13:20.192Z"
   },
   {
      "id": "y71c6K8S",
      "RSES_1": "Strongly Disargee",
      "RSES_2": "Strongly Agree",
      "group": 2,
      "datestarted": "2024-09-22T19:21:59.245Z",
      "datecompleted": "2024-09-22T19:22:42.863Z"
   }
]
```

# Hosting {#sec-hosting}

The main way to host Veles surveys is through [VelesWeb](https://www.velesweb.org/). It is only available to academics. Veles isn't meant to be a commercial product so even if VelesWeb will get some restrictions and paywalls (it mostly depends on the maintenance costs), there will always be an alternative. You can host your surveys yourself.

## VelesWeb

When you generate a Survey, you get a folder with a series of files. Their structure is not that important if you intent to use [VelesWeb](https://www.velesweb.org/). The only file that will be interesting, is the `main.js` file in the `build` folder.

Log in to your VelesWeb account, create a new survey, give it a title and -- optionally -- a description. Then choose the `main.js` file from your hard drive. Submit and wait. It might take a minute or two. After that you'll see your survey's overview.

::: light-mode
![](figs/getting_started/velesweb_overview.png)
:::

::: dark-mode
![](figs/getting_started/velesweb_overview_dark.png)
:::

From here you can test the survey, make it offline or turn on the real data collection. Each survey has two databases -- the main one and the test one. The test mode is the default. As you can see below, responses collected in both modes are separated. This makes it easier to test your survey without worrying about messing up the data.

## Self-hosting

If we want to manage our surveys ourselves, we need a place to host them and a place to store the results. Luckily there are free methods to do both. In here we'll use Vercel for hosting and MongoDB Atlas for storing the results. Additional benefit of self-hosting is that we can use our own domain name e.g. create a special subdomain in our university's domain (like `surveys.uwr.edu.pl`). That is if someone will give us access to the DNS settings.

### Configuration

1.  Go to [VelesSurvey for Vercel GitHub repository](https://github.com/jakub-jedrusiak/VelesSurvey-Vercel). Click on "Use this template" button. Give your repo a name and confirm with "Create repository from template" button. Of course you need to be logged into your GitHub account.

2.  Go to [Vercel](https://vercel.com/), create an account and from there start a new project. Link the project to your newly created GitHub repo.

3.  Don't change the default deployment settings but do click on `Enviroment variables`. Add a new variable named `SECRET_KEY` with a value generated with [this website](https://djecrety.ir/) and confirm with "Add" button. If you plan to use a custom domain, you add a `DOMAIN_NAME` variable with a value like `.uwr.edu.pl`. Don't worry, if you don't know yet. You can always add it later. You can read more about custom domains [here](https://vercel.com/docs/concepts/projects/domains/add-a-domain).

::: light-mode
![](/figs/getting_started/config_vercel.png)
:::

::: dark-mode
![](/figs/getting_started/config_vercel_dark.png)
:::

4.  When the building process ends, you can visit your page. It's just a white screen with a moving Veles logo. By design, there's no survey list on the main page. It helps keeping everything confidential.

5.  Not only we need a place to collect our responses, but also somewhere to store them. For this purpose we'll use MongoDB and its free 512 MB of space. My rough calculations say it will allow us to collect around 1.5 milion responses before we run out of space. I wish everyone this kind of probe sizes. Go to [MongoDB](https://www.mongodb.com/), create a free account and then a free cluster. The website will take you through the whole process.

6.  Now we need do connect Vercel and MongoDB. You can do it on [this website](https://vercel.com/integrations/mongodbatlas). Click "Add integration" and go with the forms. It will make some needed security changes to your MongoDB cluster, so the answers can be sent from Vercel app to the database.

7.  That's it. Test your application by going to `/tea_survey` in your Vercel app (e.g. `https://tea-research-project.vercel.app/tea_survey/`). You should see a survey with a series of questions about tea. When you complete it, you should see a new response in your database.

### Using

When you create a survey with Veles, you get a folder with a series of files. The most important one is `main.js` from `build` subfolder. To add it to your site, you need to create a new subfolder in the `surveys` folder in your repository. The easiest way to do it it through [GitHub Desktop](https://desktop.github.com/). Use it to download (or "clone") your repository and create a new folder inside the `surveys` folder. The name of that folder will become a link to your survey, e.g. if you name it `black_tea_study`, the link will be something like `https://tea-research-project.vercel.app/black_tea_study`. Then put your `main.js` in your newly created folder. **Do not rename it.** Then use GitHub Desktop to upload (or "push") your changes. After a minute or so, your survey should be available.

To read and save your data you can use web desktop on [mongodb.com](https://www.mongodb.com/) or with a special program called [MongoDB Compass](https://www.mongodb.com/products/compass). After any responses are recieved (even for the tea survey), a new database called `VelesResponses` is created. Every survey gets its own folder (or "collection"). From there you can easily export your data to `.csv` or `.json`.

If you use R for the analysis, you can connect to the database directly, without having to download anything. See [this article](https://www.mongodb.com/languages/mongodb-and-r-example) for the details. You can also do that with [Python](https://www.mongodb.com/languages/python).

# PsychoJS experiments

To be implemented...